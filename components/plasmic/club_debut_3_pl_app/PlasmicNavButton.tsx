// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: n7PMUCBoe1fA7rXcBRi5FH
// Component: eAySFtM0VM
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_club_debut_3_pl_app.module.css"; // plasmic-import: n7PMUCBoe1fA7rXcBRi5FH/projectcss
import sty from "./PlasmicNavButton.module.css"; // plasmic-import: eAySFtM0VM/css

import ArrowRightIcon from "./icons/PlasmicIcon__ArrowRight"; // plasmic-import: MwLzW1BmIz/icon

export type PlasmicNavButton__VariantMembers = {
  next: "next";
  previous: "previous";
};

export type PlasmicNavButton__VariantsArgs = {
  next?: SingleBooleanChoiceArg<"next">;
  previous?: SingleBooleanChoiceArg<"previous">;
};

type VariantPropType = keyof PlasmicNavButton__VariantsArgs;
export const PlasmicNavButton__VariantProps = new Array<VariantPropType>(
  "next",
  "previous"
);

export type PlasmicNavButton__ArgsType = {};
type ArgPropType = keyof PlasmicNavButton__ArgsType;
export const PlasmicNavButton__ArgProps = new Array<ArgPropType>();

export type PlasmicNavButton__OverridesType = {
  root?: p.Flex<"div">;
  button?: p.Flex<"button">;
  freeBox?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
};

export interface DefaultNavButtonProps {
  next?: SingleBooleanChoiceArg<"next">;
  previous?: SingleBooleanChoiceArg<"previous">;
  className?: string;
}

function PlasmicNavButton__RenderFunc(props: {
  variants: PlasmicNavButton__VariantsArgs;
  args: PlasmicNavButton__ArgsType;
  overrides: PlasmicNavButton__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        { [sty.rootprevious]: hasVariant(variants, "previous", "previous") }
      )}
      onClick={"/Homepage" as const}
    >
      <button
        data-plasmic-name={"button"}
        data-plasmic-override={overrides.button}
        className={classNames(projectcss.all, projectcss.button, sty.button, {
          [sty.buttonnext]: hasVariant(variants, "next", "next"),
          [sty.buttonprevious]: hasVariant(variants, "previous", "previous")
        })}
      >
        {true ? (
          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox, {
              [sty.freeBoxprevious]: hasVariant(
                variants,
                "previous",
                "previous"
              )
            })}
          >
            <ArrowRightIcon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(projectcss.all, sty.svg, {
                [sty.svgprevious]: hasVariant(variants, "previous", "previous")
              })}
              role={"img"}
            />
          </div>
        ) : null}
      </button>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "button", "freeBox", "svg"],
  button: ["button", "freeBox", "svg"],
  freeBox: ["freeBox", "svg"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  button: "button";
  freeBox: "div";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavButton__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavButton__VariantsArgs;
    args?: PlasmicNavButton__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavButton__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNavButton__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNavButton__ArgProps,
      internalVariantPropNames: PlasmicNavButton__VariantProps
    });

    return PlasmicNavButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavButton";
  } else {
    func.displayName = `PlasmicNavButton.${nodeName}`;
  }
  return func;
}

export const PlasmicNavButton = Object.assign(
  // Top-level PlasmicNavButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    button: makeNodeComponent("button"),
    freeBox: makeNodeComponent("freeBox"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicNavButton
    internalVariantProps: PlasmicNavButton__VariantProps,
    internalArgProps: PlasmicNavButton__ArgProps
  }
);

export default PlasmicNavButton;
/* prettier-ignore-end */
