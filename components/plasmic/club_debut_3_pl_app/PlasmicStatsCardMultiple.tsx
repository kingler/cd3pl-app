// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: n7PMUCBoe1fA7rXcBRi5FH
// Component: 5U-Zs7sqEeG
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import StatWidgetCardTop from "../../StatWidgetCardTop"; // plasmic-import: tLe-NrqXMX/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_club_debut_3_pl_app.module.css"; // plasmic-import: n7PMUCBoe1fA7rXcBRi5FH/projectcss
import sty from "./PlasmicStatsCardMultiple.module.css"; // plasmic-import: 5U-Zs7sqEeG/css

export type PlasmicStatsCardMultiple__VariantMembers = {};

export type PlasmicStatsCardMultiple__VariantsArgs = {};
type VariantPropType = keyof PlasmicStatsCardMultiple__VariantsArgs;
export const PlasmicStatsCardMultiple__VariantProps =
  new Array<VariantPropType>();

export type PlasmicStatsCardMultiple__ArgsType = {};
type ArgPropType = keyof PlasmicStatsCardMultiple__ArgsType;
export const PlasmicStatsCardMultiple__ArgProps = new Array<ArgPropType>();

export type PlasmicStatsCardMultiple__OverridesType = {
  statCard?: p.Flex<"div">;
  statWidgetCardTop?: p.Flex<typeof StatWidgetCardTop>;
  text?: p.Flex<"div">;
  totalOrders?: p.Flex<"div">;
  content?: p.Flex<"div">;
  columns12?: p.Flex<"div">;
  _112?: p.Flex<"div">;
  _142?: p.Flex<"div">;
  _132?: p.Flex<"div">;
  _122?: p.Flex<"div">;
  _123?: p.Flex<"div">;
  ordersByChannelsList?: p.Flex<"div">;
  ordersByEvents?: p.Flex<"div">;
  eventOrders?: p.Flex<"div">;
  eventsLabel?: p.Flex<"div">;
  ordersByOnline?: p.Flex<"div">;
  onlineOrders?: p.Flex<"div">;
  uiOrdersStatsChannelLabel2?: p.Flex<"div">;
  ordersByCdMarketplace?: p.Flex<"div">;
  totalCdMarketplaceOrders?: p.Flex<"div">;
  marketplaceLabel?: p.Flex<"div">;
  ordersByWholesale?: p.Flex<"div">;
  totalWholesaleOrders?: p.Flex<"div">;
  wholesaleLabel?: p.Flex<"div">;
  ordersByPopupShop?: p.Flex<"div">;
  uiOrdersByChannelCountLabel5?: p.Flex<"div">;
  uiOrdersStatsChannelLabel5?: p.Flex<"div">;
};

export interface DefaultStatsCardMultipleProps {
  className?: string;
}

function PlasmicStatsCardMultiple__RenderFunc(props: {
  variants: PlasmicStatsCardMultiple__VariantsArgs;
  args: PlasmicStatsCardMultiple__ArgsType;
  overrides: PlasmicStatsCardMultiple__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  return (
    <div
      data-plasmic-name={"statCard"}
      data-plasmic-override={overrides.statCard}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.statCard
      )}
    >
      <StatWidgetCardTop
        data-plasmic-name={"statWidgetCardTop"}
        data-plasmic-override={overrides.statWidgetCardTop}
        className={classNames("__wab_instance", sty.statWidgetCardTop)}
      >
        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text
          )}
        >
          {"Orders by Channel"}
        </div>
      </StatWidgetCardTop>

      {true ? (
        <div className={classNames(projectcss.all, sty.freeBox__za8VB)}>
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox___295G)}>
              <div
                data-plasmic-name={"totalOrders"}
                data-plasmic-override={overrides.totalOrders}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.totalOrders
                )}
              >
                {"3367"}
              </div>
            </div>
          ) : null}
          {true ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"content"}
              data-plasmic-override={overrides.content}
              hasGap={true}
              className={classNames(projectcss.all, sty.content)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"columns12"}
                data-plasmic-override={overrides.columns12}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns12)}
              >
                <div
                  data-plasmic-name={"_112"}
                  data-plasmic-override={overrides._112}
                  className={classNames(projectcss.all, sty._112)}
                />

                <div
                  data-plasmic-name={"_142"}
                  data-plasmic-override={overrides._142}
                  className={classNames(projectcss.all, sty._142)}
                />

                <div
                  data-plasmic-name={"_132"}
                  data-plasmic-override={overrides._132}
                  className={classNames(projectcss.all, sty._132)}
                />

                <div
                  data-plasmic-name={"_122"}
                  data-plasmic-override={overrides._122}
                  className={classNames(projectcss.all, sty._122)}
                />

                <div
                  data-plasmic-name={"_123"}
                  data-plasmic-override={overrides._123}
                  className={classNames(projectcss.all, sty._123)}
                />
              </p.Stack>

              {true ? (
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"ordersByChannelsList"}
                  data-plasmic-override={overrides.ordersByChannelsList}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    sty.ordersByChannelsList
                  )}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"ordersByEvents"}
                    data-plasmic-override={overrides.ordersByEvents}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.ordersByEvents)}
                  >
                    <div
                      data-plasmic-name={"eventOrders"}
                      data-plasmic-override={overrides.eventOrders}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.eventOrders
                      )}
                    >
                      {"130"}
                    </div>

                    <div
                      data-plasmic-name={"eventsLabel"}
                      data-plasmic-override={overrides.eventsLabel}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.eventsLabel
                      )}
                    >
                      {"Events"}
                    </div>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"ordersByOnline"}
                    data-plasmic-override={overrides.ordersByOnline}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.ordersByOnline)}
                  >
                    <div
                      data-plasmic-name={"onlineOrders"}
                      data-plasmic-override={overrides.onlineOrders}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.onlineOrders
                      )}
                    >
                      {"130"}
                    </div>

                    <div
                      data-plasmic-name={"uiOrdersStatsChannelLabel2"}
                      data-plasmic-override={
                        overrides.uiOrdersStatsChannelLabel2
                      }
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.uiOrdersStatsChannelLabel2
                      )}
                    >
                      {"Online"}
                    </div>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"ordersByCdMarketplace"}
                    data-plasmic-override={overrides.ordersByCdMarketplace}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      sty.ordersByCdMarketplace
                    )}
                  >
                    <div
                      data-plasmic-name={"totalCdMarketplaceOrders"}
                      data-plasmic-override={overrides.totalCdMarketplaceOrders}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.totalCdMarketplaceOrders
                      )}
                    >
                      {"130"}
                    </div>

                    <div
                      data-plasmic-name={"marketplaceLabel"}
                      data-plasmic-override={overrides.marketplaceLabel}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.marketplaceLabel
                      )}
                    >
                      {"Marketplace"}
                    </div>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"ordersByWholesale"}
                    data-plasmic-override={overrides.ordersByWholesale}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      sty.ordersByWholesale
                    )}
                  >
                    <div
                      data-plasmic-name={"totalWholesaleOrders"}
                      data-plasmic-override={overrides.totalWholesaleOrders}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.totalWholesaleOrders
                      )}
                    >
                      {"130"}
                    </div>

                    <div
                      data-plasmic-name={"wholesaleLabel"}
                      data-plasmic-override={overrides.wholesaleLabel}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.wholesaleLabel
                      )}
                    >
                      {"Wholesale"}
                    </div>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"ordersByPopupShop"}
                    data-plasmic-override={overrides.ordersByPopupShop}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      sty.ordersByPopupShop
                    )}
                  >
                    <div
                      data-plasmic-name={"uiOrdersByChannelCountLabel5"}
                      data-plasmic-override={
                        overrides.uiOrdersByChannelCountLabel5
                      }
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.uiOrdersByChannelCountLabel5
                      )}
                    >
                      {"130"}
                    </div>

                    <div
                      data-plasmic-name={"uiOrdersStatsChannelLabel5"}
                      data-plasmic-override={
                        overrides.uiOrdersStatsChannelLabel5
                      }
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.uiOrdersStatsChannelLabel5
                      )}
                    >
                      {"Pop-Shop"}
                    </div>
                  </p.Stack>
                </p.Stack>
              ) : null}
            </p.Stack>
          ) : null}
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  statCard: [
    "statCard",
    "statWidgetCardTop",
    "text",
    "totalOrders",
    "content",
    "columns12",
    "_112",
    "_142",
    "_132",
    "_122",
    "_123",
    "ordersByChannelsList",
    "ordersByEvents",
    "eventOrders",
    "eventsLabel",
    "ordersByOnline",
    "onlineOrders",
    "uiOrdersStatsChannelLabel2",
    "ordersByCdMarketplace",
    "totalCdMarketplaceOrders",
    "marketplaceLabel",
    "ordersByWholesale",
    "totalWholesaleOrders",
    "wholesaleLabel",
    "ordersByPopupShop",
    "uiOrdersByChannelCountLabel5",
    "uiOrdersStatsChannelLabel5"
  ],
  statWidgetCardTop: ["statWidgetCardTop", "text"],
  text: ["text"],
  totalOrders: ["totalOrders"],
  content: [
    "content",
    "columns12",
    "_112",
    "_142",
    "_132",
    "_122",
    "_123",
    "ordersByChannelsList",
    "ordersByEvents",
    "eventOrders",
    "eventsLabel",
    "ordersByOnline",
    "onlineOrders",
    "uiOrdersStatsChannelLabel2",
    "ordersByCdMarketplace",
    "totalCdMarketplaceOrders",
    "marketplaceLabel",
    "ordersByWholesale",
    "totalWholesaleOrders",
    "wholesaleLabel",
    "ordersByPopupShop",
    "uiOrdersByChannelCountLabel5",
    "uiOrdersStatsChannelLabel5"
  ],
  columns12: ["columns12", "_112", "_142", "_132", "_122", "_123"],
  _112: ["_112"],
  _142: ["_142"],
  _132: ["_132"],
  _122: ["_122"],
  _123: ["_123"],
  ordersByChannelsList: [
    "ordersByChannelsList",
    "ordersByEvents",
    "eventOrders",
    "eventsLabel",
    "ordersByOnline",
    "onlineOrders",
    "uiOrdersStatsChannelLabel2",
    "ordersByCdMarketplace",
    "totalCdMarketplaceOrders",
    "marketplaceLabel",
    "ordersByWholesale",
    "totalWholesaleOrders",
    "wholesaleLabel",
    "ordersByPopupShop",
    "uiOrdersByChannelCountLabel5",
    "uiOrdersStatsChannelLabel5"
  ],
  ordersByEvents: ["ordersByEvents", "eventOrders", "eventsLabel"],
  eventOrders: ["eventOrders"],
  eventsLabel: ["eventsLabel"],
  ordersByOnline: [
    "ordersByOnline",
    "onlineOrders",
    "uiOrdersStatsChannelLabel2"
  ],
  onlineOrders: ["onlineOrders"],
  uiOrdersStatsChannelLabel2: ["uiOrdersStatsChannelLabel2"],
  ordersByCdMarketplace: [
    "ordersByCdMarketplace",
    "totalCdMarketplaceOrders",
    "marketplaceLabel"
  ],
  totalCdMarketplaceOrders: ["totalCdMarketplaceOrders"],
  marketplaceLabel: ["marketplaceLabel"],
  ordersByWholesale: [
    "ordersByWholesale",
    "totalWholesaleOrders",
    "wholesaleLabel"
  ],
  totalWholesaleOrders: ["totalWholesaleOrders"],
  wholesaleLabel: ["wholesaleLabel"],
  ordersByPopupShop: [
    "ordersByPopupShop",
    "uiOrdersByChannelCountLabel5",
    "uiOrdersStatsChannelLabel5"
  ],
  uiOrdersByChannelCountLabel5: ["uiOrdersByChannelCountLabel5"],
  uiOrdersStatsChannelLabel5: ["uiOrdersStatsChannelLabel5"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  statCard: "div";
  statWidgetCardTop: typeof StatWidgetCardTop;
  text: "div";
  totalOrders: "div";
  content: "div";
  columns12: "div";
  _112: "div";
  _142: "div";
  _132: "div";
  _122: "div";
  _123: "div";
  ordersByChannelsList: "div";
  ordersByEvents: "div";
  eventOrders: "div";
  eventsLabel: "div";
  ordersByOnline: "div";
  onlineOrders: "div";
  uiOrdersStatsChannelLabel2: "div";
  ordersByCdMarketplace: "div";
  totalCdMarketplaceOrders: "div";
  marketplaceLabel: "div";
  ordersByWholesale: "div";
  totalWholesaleOrders: "div";
  wholesaleLabel: "div";
  ordersByPopupShop: "div";
  uiOrdersByChannelCountLabel5: "div";
  uiOrdersStatsChannelLabel5: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicStatsCardMultiple__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicStatsCardMultiple__VariantsArgs;
    args?: PlasmicStatsCardMultiple__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicStatsCardMultiple__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicStatsCardMultiple__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicStatsCardMultiple__ArgProps,
      internalVariantPropNames: PlasmicStatsCardMultiple__VariantProps
    });

    return PlasmicStatsCardMultiple__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "statCard") {
    func.displayName = "PlasmicStatsCardMultiple";
  } else {
    func.displayName = `PlasmicStatsCardMultiple.${nodeName}`;
  }
  return func;
}

export const PlasmicStatsCardMultiple = Object.assign(
  // Top-level PlasmicStatsCardMultiple renders the root element
  makeNodeComponent("statCard"),
  {
    // Helper components rendering sub-elements
    statWidgetCardTop: makeNodeComponent("statWidgetCardTop"),
    text: makeNodeComponent("text"),
    totalOrders: makeNodeComponent("totalOrders"),
    content: makeNodeComponent("content"),
    columns12: makeNodeComponent("columns12"),
    _112: makeNodeComponent("_112"),
    _142: makeNodeComponent("_142"),
    _132: makeNodeComponent("_132"),
    _122: makeNodeComponent("_122"),
    _123: makeNodeComponent("_123"),
    ordersByChannelsList: makeNodeComponent("ordersByChannelsList"),
    ordersByEvents: makeNodeComponent("ordersByEvents"),
    eventOrders: makeNodeComponent("eventOrders"),
    eventsLabel: makeNodeComponent("eventsLabel"),
    ordersByOnline: makeNodeComponent("ordersByOnline"),
    onlineOrders: makeNodeComponent("onlineOrders"),
    uiOrdersStatsChannelLabel2: makeNodeComponent("uiOrdersStatsChannelLabel2"),
    ordersByCdMarketplace: makeNodeComponent("ordersByCdMarketplace"),
    totalCdMarketplaceOrders: makeNodeComponent("totalCdMarketplaceOrders"),
    marketplaceLabel: makeNodeComponent("marketplaceLabel"),
    ordersByWholesale: makeNodeComponent("ordersByWholesale"),
    totalWholesaleOrders: makeNodeComponent("totalWholesaleOrders"),
    wholesaleLabel: makeNodeComponent("wholesaleLabel"),
    ordersByPopupShop: makeNodeComponent("ordersByPopupShop"),
    uiOrdersByChannelCountLabel5: makeNodeComponent(
      "uiOrdersByChannelCountLabel5"
    ),
    uiOrdersStatsChannelLabel5: makeNodeComponent("uiOrdersStatsChannelLabel5"),

    // Metadata about props expected for PlasmicStatsCardMultiple
    internalVariantProps: PlasmicStatsCardMultiple__VariantProps,
    internalArgProps: PlasmicStatsCardMultiple__ArgProps
  }
);

export default PlasmicStatsCardMultiple;
/* prettier-ignore-end */
