// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: n7PMUCBoe1fA7rXcBRi5FH
// Component: oQTDjkPKlg
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import StatWidgetCardTop from "../../StatWidgetCardTop"; // plasmic-import: tLe-NrqXMX/component
import StatWidgetCartImageTile from "../../StatWidgetCartImageTile"; // plasmic-import: QwLrSAW9KB/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_club_debut_3_pl_app.module.css"; // plasmic-import: n7PMUCBoe1fA7rXcBRi5FH/projectcss
import sty from "./PlasmicStatCardWidget4.module.css"; // plasmic-import: oQTDjkPKlg/css

export type PlasmicStatCardWidget4__VariantMembers = {};

export type PlasmicStatCardWidget4__VariantsArgs = {};
type VariantPropType = keyof PlasmicStatCardWidget4__VariantsArgs;
export const PlasmicStatCardWidget4__VariantProps =
  new Array<VariantPropType>();

export type PlasmicStatCardWidget4__ArgsType = {
  children?: React.ReactNode;
  children5?: React.ReactNode;
  children6?: React.ReactNode;
  children7?: React.ReactNode;
  totalRevenue?: React.ReactNode;
  totalItemsSales2?: React.ReactNode;
  totalItemsSales3?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  slot4?: React.ReactNode;
  slot5?: React.ReactNode;
};

type ArgPropType = keyof PlasmicStatCardWidget4__ArgsType;
export const PlasmicStatCardWidget4__ArgProps = new Array<ArgPropType>(
  "children",
  "children5",
  "children6",
  "children7",
  "totalRevenue",
  "totalItemsSales2",
  "totalItemsSales3",
  "slot",
  "slot2",
  "slot3",
  "slot4",
  "slot5"
);

export type PlasmicStatCardWidget4__OverridesType = {
  statCard?: p.Flex<"div">;
  statWidgetCardTop?: p.Flex<typeof StatWidgetCardTop>;
  amountSold?: p.Flex<"div">;
  soldlabel?: p.Flex<"div">;
  amountSold2?: p.Flex<"div">;
  soldlabel2?: p.Flex<"div">;
  amountSold3?: p.Flex<"div">;
  soldlabel3?: p.Flex<"div">;
  amountSold4?: p.Flex<"div">;
  soldlabel4?: p.Flex<"div">;
  totalItemsSales?: p.Flex<"div">;
};

export interface DefaultStatCardWidget4Props {
  children?: React.ReactNode;
  children5?: React.ReactNode;
  children6?: React.ReactNode;
  children7?: React.ReactNode;
  totalRevenue?: React.ReactNode;
  totalItemsSales2?: React.ReactNode;
  totalItemsSales3?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  slot4?: React.ReactNode;
  slot5?: React.ReactNode;
  className?: string;
}

function PlasmicStatCardWidget4__RenderFunc(props: {
  variants: PlasmicStatCardWidget4__VariantsArgs;
  args: PlasmicStatCardWidget4__ArgsType;
  overrides: PlasmicStatCardWidget4__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  return (
    <div
      data-plasmic-name={"statCard"}
      data-plasmic-override={overrides.statCard}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.statCard
      )}
    >
      <StatWidgetCardTop
        data-plasmic-name={"statWidgetCardTop"}
        data-plasmic-override={overrides.statWidgetCardTop}
        className={classNames("__wab_instance", sty.statWidgetCardTop)}
      >
        {"Top Selling Items"}
      </StatWidgetCardTop>

      {true ? (
        <div className={classNames(projectcss.all, sty.freeBox__skFez)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___57138
            )}
          >
            {"Today"}
          </div>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__ueTnN
            )}
          >
            {"Last 10 days"}
          </div>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__cuhRu
            )}
          >
            {"Last 30 days"}
          </div>
        </div>
      ) : null}
      {true ? (
        <div className={classNames(projectcss.all, sty.freeBox__nTpoY)}>
          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__fNfdO)}
            >
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__dfLz2)}
                >
                  {true ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__yboHb)}
                    >
                      {true ? (
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__pjpGr
                          )}
                        >
                          <div
                            data-plasmic-name={"amountSold"}
                            data-plasmic-override={overrides.amountSold}
                            className={classNames(
                              projectcss.all,
                              sty.amountSold
                            )}
                          >
                            {p.renderPlasmicSlot({
                              defaultContents: "250",
                              value: args.slot2,
                              className: classNames(sty.slotTargetSlot2)
                            })}
                          </div>

                          {true ? (
                            <div
                              data-plasmic-name={"soldlabel"}
                              data-plasmic-override={overrides.soldlabel}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.soldlabel
                              )}
                            >
                              {"sold"}
                            </div>
                          ) : null}
                        </p.Stack>
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__xXnUq
                        )}
                      >
                        {p.renderPlasmicSlot({
                          defaultContents: "$6,250",
                          value: args.totalRevenue,
                          className: classNames(sty.slotTargetTotalRevenue)
                        })}
                      </div>
                    </p.Stack>
                  ) : null}
                  {true ? (
                    <StatWidgetCartImageTile
                      className={classNames(
                        "__wab_instance",
                        sty.statWidgetCartImageTile__cm6HP
                      )}
                    >
                      {p.renderPlasmicSlot({
                        defaultContents: (
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__si8Sk)}
                            displayHeight={"80px" as const}
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"100%" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"80px" as const}
                            loading={"lazy" as const}
                            src={{
                              src: "/plasmic/club_debut_3_pl_app/images/floridaTshirtWhitepng.png",
                              fullWidth: 1588,
                              fullHeight: 1608,
                              aspectRatio: undefined
                            }}
                          />
                        ),

                        value: args.children
                      })}
                    </StatWidgetCartImageTile>
                  ) : null}
                </p.Stack>
              ) : null}
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__awMe)}
                >
                  {true ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__tpBeN)}
                    >
                      {true ? (
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__pvHmD
                          )}
                        >
                          <div
                            data-plasmic-name={"amountSold2"}
                            data-plasmic-override={overrides.amountSold2}
                            className={classNames(
                              projectcss.all,
                              sty.amountSold2
                            )}
                          >
                            {p.renderPlasmicSlot({
                              defaultContents: "200",
                              value: args.slot3,
                              className: classNames(sty.slotTargetSlot3)
                            })}
                          </div>

                          {true ? (
                            <div
                              data-plasmic-name={"soldlabel2"}
                              data-plasmic-override={overrides.soldlabel2}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.soldlabel2
                              )}
                            >
                              {"sold"}
                            </div>
                          ) : null}
                        </p.Stack>
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__qHlx2
                        )}
                      >
                        {p.renderPlasmicSlot({
                          defaultContents: "$3,600",
                          value: args.totalItemsSales2,
                          className: classNames(sty.slotTargetTotalItemsSales2)
                        })}
                      </div>
                    </p.Stack>
                  ) : null}
                  {true ? (
                    <StatWidgetCartImageTile
                      className={classNames(
                        "__wab_instance",
                        sty.statWidgetCartImageTile__bQili
                      )}
                    >
                      {p.renderPlasmicSlot({
                        defaultContents: (
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img___3EF8I)}
                            displayHeight={"80px" as const}
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"100%" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"80px" as const}
                            loading={"lazy" as const}
                            src={{
                              src: "/plasmic/club_debut_3_pl_app/images/floridaTshirtWhitepng.png",
                              fullWidth: 1588,
                              fullHeight: 1608,
                              aspectRatio: undefined
                            }}
                          />
                        ),

                        value: args.children5
                      })}
                    </StatWidgetCartImageTile>
                  ) : null}
                </p.Stack>
              ) : null}
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__gx4Zp)}
                >
                  {true ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__faOaP)}
                    >
                      {true ? (
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__hkIPt
                          )}
                        >
                          <div
                            data-plasmic-name={"amountSold3"}
                            data-plasmic-override={overrides.amountSold3}
                            className={classNames(
                              projectcss.all,
                              sty.amountSold3
                            )}
                          >
                            {p.renderPlasmicSlot({
                              defaultContents: "101",
                              value: args.slot4,
                              className: classNames(sty.slotTargetSlot4)
                            })}
                          </div>

                          {true ? (
                            <div
                              data-plasmic-name={"soldlabel3"}
                              data-plasmic-override={overrides.soldlabel3}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.soldlabel3
                              )}
                            >
                              {"sold"}
                            </div>
                          ) : null}
                        </p.Stack>
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__b7Stb
                        )}
                      >
                        {p.renderPlasmicSlot({
                          defaultContents: "$2,525",
                          value: args.totalItemsSales3,
                          className: classNames(sty.slotTargetTotalItemsSales3)
                        })}
                      </div>
                    </p.Stack>
                  ) : null}
                  {true ? (
                    <StatWidgetCartImageTile
                      className={classNames(
                        "__wab_instance",
                        sty.statWidgetCartImageTile__pved
                      )}
                    >
                      {p.renderPlasmicSlot({
                        defaultContents: (
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__wax0V)}
                            displayHeight={"80px" as const}
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"100%" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"80px" as const}
                            loading={"lazy" as const}
                            src={{
                              src: "/plasmic/club_debut_3_pl_app/images/floridaTshirtWhitepng.png",
                              fullWidth: 1588,
                              fullHeight: 1608,
                              aspectRatio: undefined
                            }}
                          />
                        ),

                        value: args.children6
                      })}
                    </StatWidgetCartImageTile>
                  ) : null}
                </p.Stack>
              ) : null}
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__bMyEs)}
                >
                  {true ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__tW7Kf)}
                    >
                      {true ? (
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__xdDld
                          )}
                        >
                          <div
                            data-plasmic-name={"amountSold4"}
                            data-plasmic-override={overrides.amountSold4}
                            className={classNames(
                              projectcss.all,
                              sty.amountSold4
                            )}
                          >
                            {p.renderPlasmicSlot({
                              defaultContents: "95",
                              value: args.slot5,
                              className: classNames(sty.slotTargetSlot5)
                            })}
                          </div>

                          {true ? (
                            <div
                              data-plasmic-name={"soldlabel4"}
                              data-plasmic-override={overrides.soldlabel4}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.soldlabel4
                              )}
                            >
                              {"sold"}
                            </div>
                          ) : null}
                        </p.Stack>
                      ) : null}

                      <div
                        data-plasmic-name={"totalItemsSales"}
                        data-plasmic-override={overrides.totalItemsSales}
                        className={classNames(
                          projectcss.all,
                          sty.totalItemsSales
                        )}
                      >
                        {p.renderPlasmicSlot({
                          defaultContents: "$3,325",
                          value: args.slot,
                          className: classNames(sty.slotTargetSlot)
                        })}
                      </div>
                    </p.Stack>
                  ) : null}
                  {true ? (
                    <StatWidgetCartImageTile
                      className={classNames(
                        "__wab_instance",
                        sty.statWidgetCartImageTile__jrFhM
                      )}
                    >
                      {p.renderPlasmicSlot({
                        defaultContents: (
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__qKzrl)}
                            displayHeight={"80px" as const}
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"100%" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"80px" as const}
                            loading={"lazy" as const}
                            src={{
                              src: "/plasmic/club_debut_3_pl_app/images/floridaTshirtWhitepng.png",
                              fullWidth: 1588,
                              fullHeight: 1608,
                              aspectRatio: undefined
                            }}
                          />
                        ),

                        value: args.children7
                      })}
                    </StatWidgetCartImageTile>
                  ) : null}
                </p.Stack>
              ) : null}
            </p.Stack>
          ) : null}
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  statCard: [
    "statCard",
    "statWidgetCardTop",
    "amountSold",
    "soldlabel",
    "amountSold2",
    "soldlabel2",
    "amountSold3",
    "soldlabel3",
    "amountSold4",
    "soldlabel4",
    "totalItemsSales"
  ],
  statWidgetCardTop: ["statWidgetCardTop"],
  amountSold: ["amountSold"],
  soldlabel: ["soldlabel"],
  amountSold2: ["amountSold2"],
  soldlabel2: ["soldlabel2"],
  amountSold3: ["amountSold3"],
  soldlabel3: ["soldlabel3"],
  amountSold4: ["amountSold4"],
  soldlabel4: ["soldlabel4"],
  totalItemsSales: ["totalItemsSales"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  statCard: "div";
  statWidgetCardTop: typeof StatWidgetCardTop;
  amountSold: "div";
  soldlabel: "div";
  amountSold2: "div";
  soldlabel2: "div";
  amountSold3: "div";
  soldlabel3: "div";
  amountSold4: "div";
  soldlabel4: "div";
  totalItemsSales: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicStatCardWidget4__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicStatCardWidget4__VariantsArgs;
    args?: PlasmicStatCardWidget4__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicStatCardWidget4__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicStatCardWidget4__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicStatCardWidget4__ArgProps,
      internalVariantPropNames: PlasmicStatCardWidget4__VariantProps
    });

    return PlasmicStatCardWidget4__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "statCard") {
    func.displayName = "PlasmicStatCardWidget4";
  } else {
    func.displayName = `PlasmicStatCardWidget4.${nodeName}`;
  }
  return func;
}

export const PlasmicStatCardWidget4 = Object.assign(
  // Top-level PlasmicStatCardWidget4 renders the root element
  makeNodeComponent("statCard"),
  {
    // Helper components rendering sub-elements
    statWidgetCardTop: makeNodeComponent("statWidgetCardTop"),
    amountSold: makeNodeComponent("amountSold"),
    soldlabel: makeNodeComponent("soldlabel"),
    amountSold2: makeNodeComponent("amountSold2"),
    soldlabel2: makeNodeComponent("soldlabel2"),
    amountSold3: makeNodeComponent("amountSold3"),
    soldlabel3: makeNodeComponent("soldlabel3"),
    amountSold4: makeNodeComponent("amountSold4"),
    soldlabel4: makeNodeComponent("soldlabel4"),
    totalItemsSales: makeNodeComponent("totalItemsSales"),

    // Metadata about props expected for PlasmicStatCardWidget4
    internalVariantProps: PlasmicStatCardWidget4__VariantProps,
    internalArgProps: PlasmicStatCardWidget4__ArgProps
  }
);

export default PlasmicStatCardWidget4;
/* prettier-ignore-end */
