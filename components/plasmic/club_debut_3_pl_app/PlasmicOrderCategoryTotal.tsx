// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: n7PMUCBoe1fA7rXcBRi5FH
// Component: 6_pd8WbKah
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_club_debut_3_pl_app.module.css"; // plasmic-import: n7PMUCBoe1fA7rXcBRi5FH/projectcss
import sty from "./PlasmicOrderCategoryTotal.module.css"; // plasmic-import: 6_pd8WbKah/css

import Intakesvg3Icon from "./icons/PlasmicIcon__Intakesvg3"; // plasmic-import: JATz_rnVL/icon

export type PlasmicOrderCategoryTotal__VariantMembers = {};

export type PlasmicOrderCategoryTotal__VariantsArgs = {};
type VariantPropType = keyof PlasmicOrderCategoryTotal__VariantsArgs;
export const PlasmicOrderCategoryTotal__VariantProps =
  new Array<VariantPropType>();

export type PlasmicOrderCategoryTotal__ArgsType = {
  newOrderIcon?: React.ReactNode;
  newOrderLabel?: React.ReactNode;
  totalNewOrders?: React.ReactNode;
};

type ArgPropType = keyof PlasmicOrderCategoryTotal__ArgsType;
export const PlasmicOrderCategoryTotal__ArgProps = new Array<ArgPropType>(
  "newOrderIcon",
  "newOrderLabel",
  "totalNewOrders"
);

export type PlasmicOrderCategoryTotal__OverridesType = {
  category?: p.Flex<"div">;
  box?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  icon?: p.Flex<"div">;
};

export interface DefaultOrderCategoryTotalProps {
  newOrderIcon?: React.ReactNode;
  newOrderLabel?: React.ReactNode;
  totalNewOrders?: React.ReactNode;
  className?: string;
}

function PlasmicOrderCategoryTotal__RenderFunc(props: {
  variants: PlasmicOrderCategoryTotal__VariantsArgs;
  args: PlasmicOrderCategoryTotal__ArgsType;
  overrides: PlasmicOrderCategoryTotal__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"category"}
      data-plasmic-override={overrides.category}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.category
      )}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"box"}
        data-plasmic-override={overrides.box}
        hasGap={true}
        className={classNames(projectcss.all, sty.box)}
      >
        {p.renderPlasmicSlot({
          defaultContents: "233",
          value: args.totalNewOrders,
          className: classNames(sty.slotTargetTotalNewOrders)
        })}

        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox)}
        >
          {p.renderPlasmicSlot({
            defaultContents: "New",
            value: args.newOrderLabel,
            className: classNames(sty.slotTargetNewOrderLabel)
          })}
        </div>
      </p.Stack>

      {true ? (
        <div
          data-plasmic-name={"icon"}
          data-plasmic-override={overrides.icon}
          className={classNames(projectcss.all, sty.icon)}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <Intakesvg3Icon
                className={classNames(projectcss.all, sty.svg__bBpNo)}
                role={"img"}
              />
            ),

            value: args.newOrderIcon
          })}
        </div>
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  category: ["category", "box", "freeBox", "icon"],
  box: ["box", "freeBox"],
  freeBox: ["freeBox"],
  icon: ["icon"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  category: "div";
  box: "div";
  freeBox: "div";
  icon: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicOrderCategoryTotal__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicOrderCategoryTotal__VariantsArgs;
    args?: PlasmicOrderCategoryTotal__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicOrderCategoryTotal__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicOrderCategoryTotal__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicOrderCategoryTotal__ArgProps,
      internalVariantPropNames: PlasmicOrderCategoryTotal__VariantProps
    });

    return PlasmicOrderCategoryTotal__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "category") {
    func.displayName = "PlasmicOrderCategoryTotal";
  } else {
    func.displayName = `PlasmicOrderCategoryTotal.${nodeName}`;
  }
  return func;
}

export const PlasmicOrderCategoryTotal = Object.assign(
  // Top-level PlasmicOrderCategoryTotal renders the root element
  makeNodeComponent("category"),
  {
    // Helper components rendering sub-elements
    box: makeNodeComponent("box"),
    freeBox: makeNodeComponent("freeBox"),
    icon: makeNodeComponent("icon"),

    // Metadata about props expected for PlasmicOrderCategoryTotal
    internalVariantProps: PlasmicOrderCategoryTotal__VariantProps,
    internalArgProps: PlasmicOrderCategoryTotal__ArgProps
  }
);

export default PlasmicOrderCategoryTotal;
/* prettier-ignore-end */
