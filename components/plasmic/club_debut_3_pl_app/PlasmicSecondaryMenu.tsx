// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: n7PMUCBoe1fA7rXcBRi5FH
// Component: 4iDpH75bAc
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: iZavS5akl9G/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_club_debut_3_pl_app.module.css"; // plasmic-import: n7PMUCBoe1fA7rXcBRi5FH/projectcss
import sty from "./PlasmicSecondaryMenu.module.css"; // plasmic-import: 4iDpH75bAc/css

import LineIcon from "./icons/PlasmicIcon__Line"; // plasmic-import: aQ7cQkdB4R/icon
import UsersvgIcon from "./icons/PlasmicIcon__Usersvg"; // plasmic-import: WLLaN5a79/icon
import IconimportIconIcon from "./icons/PlasmicIcon__IconimportIcon"; // plasmic-import: kNFnVu4W7A/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: zGfmmTFBuGj/icon

export type PlasmicSecondaryMenu__VariantMembers = {
  isCollapsed: "isCollapsed";
};

export type PlasmicSecondaryMenu__VariantsArgs = {
  isCollapsed?: SingleBooleanChoiceArg<"isCollapsed">;
};

type VariantPropType = keyof PlasmicSecondaryMenu__VariantsArgs;
export const PlasmicSecondaryMenu__VariantProps = new Array<VariantPropType>(
  "isCollapsed"
);

export type PlasmicSecondaryMenu__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicSecondaryMenu__ArgsType;
export const PlasmicSecondaryMenu__ArgProps = new Array<ArgPropType>(
  "children"
);

export type PlasmicSecondaryMenu__OverridesType = {
  root?: p.Flex<"div">;
  link?: p.Flex<"a"> & Partial<LinkProps>;
};

export interface DefaultSecondaryMenuProps {
  children?: React.ReactNode;
  isCollapsed?: SingleBooleanChoiceArg<"isCollapsed">;
  className?: string;
}

function PlasmicSecondaryMenu__RenderFunc(props: {
  variants: PlasmicSecondaryMenu__VariantsArgs;
  args: PlasmicSecondaryMenu__ArgsType;
  overrides: PlasmicSecondaryMenu__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  return (
    true ? (
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.root,
          {
            [sty.rootisCollapsed]: hasVariant(
              variants,
              "isCollapsed",
              "isCollapsed"
            )
          }
        )}
      >
        <LineIcon
          className={classNames(projectcss.all, sty.svg__xl1K9, {
            [sty.svgisCollapsed__xl1K9LNLq]: hasVariant(
              variants,
              "isCollapsed",
              "isCollapsed"
            )
          })}
          role={"img"}
        />

        <p.PlasmicLink
          data-plasmic-name={"link"}
          data-plasmic-override={overrides.link}
          className={classNames(projectcss.all, projectcss.a, sty.link)}
          component={Link}
          href={"/account-profile" as const}
          platform={"nextjs"}
        >
          <div
            className={classNames(projectcss.all, sty.freeBox__eAaDk, {
              [sty.freeBoxisCollapsed__eAaDklNLq]: hasVariant(
                variants,
                "isCollapsed",
                "isCollapsed"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <UsersvgIcon
                  className={classNames(projectcss.all, sty.svg__a72SP)}
                  role={"img"}
                />
              ),

              value: args.children
            })}
          </div>
        </p.PlasmicLink>

        <div
          className={classNames(projectcss.all, sty.freeBox__q0ENz, {
            [sty.freeBoxisCollapsed__q0ENzlNLq]: hasVariant(
              variants,
              "isCollapsed",
              "isCollapsed"
            )
          })}
        >
          {(
            hasVariant(variants, "isCollapsed", "isCollapsed") ? true : true
          ) ? (
            <Button
              className={classNames("__wab_instance", sty.button__lcIo, {
                [sty.buttonisCollapsed__lcIoLNLq]: hasVariant(
                  variants,
                  "isCollapsed",
                  "isCollapsed"
                )
              })}
              color={"link" as const}
              link={"/account-profile" as const}
              startIcon={
                <IconimportIconIcon
                  className={classNames(projectcss.all, sty.svg__kogl)}
                  role={"img"}
                />
              }
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___31Obl
                )}
              >
                {"Account"}
              </div>
            </Button>
          ) : null}
        </div>

        <div
          className={classNames(projectcss.all, sty.freeBox___5YbY3, {
            [sty.freeBoxisCollapsed___5YbY3LNLq]: hasVariant(
              variants,
              "isCollapsed",
              "isCollapsed"
            )
          })}
        >
          <Button
            className={classNames("__wab_instance", sty.button__dH8Nm, {
              [sty.buttonisCollapsed__dH8NMlNLq]: hasVariant(
                variants,
                "isCollapsed",
                "isCollapsed"
              )
            })}
            color={"link" as const}
            link={"/login" as const}
            showStartIcon={true}
            startIcon={
              <IconimportIconIcon
                className={classNames(projectcss.all, sty.svg___79EfC, {
                  [sty.svgisCollapsed___79EfClNLq]: hasVariant(
                    variants,
                    "isCollapsed",
                    "isCollapsed"
                  )
                })}
                role={"img"}
              />
            }
          >
            {(
              hasVariant(variants, "isCollapsed", "isCollapsed") ? true : true
            ) ? (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__mBCrt,
                  {
                    [sty.textisCollapsed__mBCrtlNLq]: hasVariant(
                      variants,
                      "isCollapsed",
                      "isCollapsed"
                    )
                  }
                )}
              >
                {"Logout"}
              </div>
            ) : null}
          </Button>
        </div>
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "link"],
  link: ["link"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  link: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSecondaryMenu__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSecondaryMenu__VariantsArgs;
    args?: PlasmicSecondaryMenu__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSecondaryMenu__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSecondaryMenu__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSecondaryMenu__ArgProps,
      internalVariantPropNames: PlasmicSecondaryMenu__VariantProps
    });

    return PlasmicSecondaryMenu__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSecondaryMenu";
  } else {
    func.displayName = `PlasmicSecondaryMenu.${nodeName}`;
  }
  return func;
}

export const PlasmicSecondaryMenu = Object.assign(
  // Top-level PlasmicSecondaryMenu renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    link: makeNodeComponent("link"),

    // Metadata about props expected for PlasmicSecondaryMenu
    internalVariantProps: PlasmicSecondaryMenu__VariantProps,
    internalArgProps: PlasmicSecondaryMenu__ArgProps
  }
);

export default PlasmicSecondaryMenu;
/* prettier-ignore-end */
