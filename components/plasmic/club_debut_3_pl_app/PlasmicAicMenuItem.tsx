// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: n7PMUCBoe1fA7rXcBRi5FH
// Component: E7goz1mIfm
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_club_debut_3_pl_app.module.css"; // plasmic-import: n7PMUCBoe1fA7rXcBRi5FH/projectcss
import sty from "./PlasmicAicMenuItem.module.css"; // plasmic-import: E7goz1mIfm/css

import BusinessIconIcon from "./icons/PlasmicIcon__BusinessIcon"; // plasmic-import: UqAuhyDJLUG/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: dtW5sCNu7WP/icon
import AppIcons5Icon from "./icons/PlasmicIcon__AppIcons5"; // plasmic-import: 7I9cVdZlI5O/icon

export type PlasmicAicMenuItem__VariantMembers = {
  selected: "selected";
  addNew: "addNew";
};

export type PlasmicAicMenuItem__VariantsArgs = {
  selected?: SingleBooleanChoiceArg<"selected">;
  addNew?: SingleBooleanChoiceArg<"addNew">;
};

type VariantPropType = keyof PlasmicAicMenuItem__VariantsArgs;
export const PlasmicAicMenuItem__VariantProps = new Array<VariantPropType>(
  "selected",
  "addNew"
);

export type PlasmicAicMenuItem__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicAicMenuItem__ArgsType;
export const PlasmicAicMenuItem__ArgProps = new Array<ArgPropType>("children");

export type PlasmicAicMenuItem__OverridesType = {
  switchAccount?: p.Flex<"a"> & Partial<LinkProps>;
  freeBox?: p.Flex<"div">;
  businessIcon?: p.Flex<"svg">;
  svg?: p.Flex<"svg">;
  textString?: p.Flex<"div">;
};

export interface DefaultAicMenuItemProps {
  children?: React.ReactNode;
  selected?: SingleBooleanChoiceArg<"selected">;
  addNew?: SingleBooleanChoiceArg<"addNew">;
  className?: string;
}

function PlasmicAicMenuItem__RenderFunc(props: {
  variants: PlasmicAicMenuItem__VariantsArgs;
  args: PlasmicAicMenuItem__ArgsType;
  overrides: PlasmicAicMenuItem__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  return (
    <p.PlasmicLink
      data-plasmic-name={"switchAccount"}
      data-plasmic-override={overrides.switchAccount}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.a,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.switchAccount,
        { [sty.switchAccountaddNew]: hasVariant(variants, "addNew", "addNew") }
      )}
      component={Link}
      platform={"nextjs"}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox, {
          [sty.freeBoxaddNew]: hasVariant(variants, "addNew", "addNew")
        })}
      >
        <p.PlasmicIcon
          data-plasmic-name={"businessIcon"}
          data-plasmic-override={overrides.businessIcon}
          PlasmicIconType={
            hasVariant(variants, "addNew", "addNew")
              ? AppIcons5Icon
              : hasVariant(variants, "selected", "selected")
              ? ChecksvgIcon
              : BusinessIconIcon
          }
          className={classNames(projectcss.all, sty.businessIcon, {
            [sty.businessIconaddNew]: hasVariant(variants, "addNew", "addNew"),
            [sty.businessIconselected]: hasVariant(
              variants,
              "selected",
              "selected"
            )
          })}
          role={"img"}
        />

        {(hasVariant(variants, "selected", "selected") ? true : true) ? (
          <BusinessIconIcon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg, {
              [sty.svgselected]: hasVariant(variants, "selected", "selected")
            })}
            role={"img"}
          />
        ) : null}

        <div
          data-plasmic-name={"textString"}
          data-plasmic-override={overrides.textString}
          className={classNames(projectcss.all, sty.textString, {
            [sty.textStringaddNew]: hasVariant(variants, "addNew", "addNew"),
            [sty.textStringselected]: hasVariant(
              variants,
              "selected",
              "selected"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Company Name",
            value: args.children,
            className: classNames(sty.slotTargetChildren, {
              [sty.slotTargetChildrenaddNew]: hasVariant(
                variants,
                "addNew",
                "addNew"
              ),
              [sty.slotTargetChildrenselected]: hasVariant(
                variants,
                "selected",
                "selected"
              )
            })
          })}
        </div>
      </div>
    </p.PlasmicLink>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  switchAccount: [
    "switchAccount",
    "freeBox",
    "businessIcon",
    "svg",
    "textString"
  ],
  freeBox: ["freeBox", "businessIcon", "svg", "textString"],
  businessIcon: ["businessIcon"],
  svg: ["svg"],
  textString: ["textString"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  switchAccount: "a";
  freeBox: "div";
  businessIcon: "svg";
  svg: "svg";
  textString: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAicMenuItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAicMenuItem__VariantsArgs;
    args?: PlasmicAicMenuItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAicMenuItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAicMenuItem__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicAicMenuItem__ArgProps,
      internalVariantPropNames: PlasmicAicMenuItem__VariantProps
    });

    return PlasmicAicMenuItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "switchAccount") {
    func.displayName = "PlasmicAicMenuItem";
  } else {
    func.displayName = `PlasmicAicMenuItem.${nodeName}`;
  }
  return func;
}

export const PlasmicAicMenuItem = Object.assign(
  // Top-level PlasmicAicMenuItem renders the root element
  makeNodeComponent("switchAccount"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    businessIcon: makeNodeComponent("businessIcon"),
    svg: makeNodeComponent("svg"),
    textString: makeNodeComponent("textString"),

    // Metadata about props expected for PlasmicAicMenuItem
    internalVariantProps: PlasmicAicMenuItem__VariantProps,
    internalArgProps: PlasmicAicMenuItem__ArgProps
  }
);

export default PlasmicAicMenuItem;
/* prettier-ignore-end */
