// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: n7PMUCBoe1fA7rXcBRi5FH
// Component: CBtIl4cHm9
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: iZavS5akl9G/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_club_debut_3_pl_app.module.css"; // plasmic-import: n7PMUCBoe1fA7rXcBRi5FH/projectcss
import sty from "./PlasmicTopBar.module.css"; // plasmic-import: CBtIl4cHm9/css

import CompnavBarlinkiconordersDarkIcon from "./icons/PlasmicIcon__CompnavBarlinkiconordersDark"; // plasmic-import: SgMwanWxm1/icon
import IcondownIconIcon from "./icons/PlasmicIcon__IcondownIcon"; // plasmic-import: 0-rTnaDj68/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: zGfmmTFBuGj/icon
import IconimportIconIcon from "./icons/PlasmicIcon__IconimportIcon"; // plasmic-import: kNFnVu4W7A/icon
import AppIcons5Icon from "./icons/PlasmicIcon__AppIcons5"; // plasmic-import: 7I9cVdZlI5O/icon

export type PlasmicTopBar__VariantMembers = {
  detailsView: "detailsView";
};

export type PlasmicTopBar__VariantsArgs = {
  detailsView?: SingleBooleanChoiceArg<"detailsView">;
};

type VariantPropType = keyof PlasmicTopBar__VariantsArgs;
export const PlasmicTopBar__VariantProps = new Array<VariantPropType>(
  "detailsView"
);

export type PlasmicTopBar__ArgsType = {
  children?: React.ReactNode;
  ordersIcon?: React.ReactNode;
  importButton?: React.ReactNode;
  exportButton?: React.ReactNode;
  addOrderButton?: React.ReactNode;
};

type ArgPropType = keyof PlasmicTopBar__ArgsType;
export const PlasmicTopBar__ArgProps = new Array<ArgPropType>(
  "children",
  "ordersIcon",
  "importButton",
  "exportButton",
  "addOrderButton"
);

export type PlasmicTopBar__OverridesType = {
  topBar?: p.Flex<"header">;
  topSectionRow?: p.Flex<"div">;
  pageTitleH1?: p.Flex<"h1">;
  bottomSectionRow?: p.Flex<"div">;
  buttonGroup?: p.Flex<"div">;
};

export interface DefaultTopBarProps {
  children?: React.ReactNode;
  ordersIcon?: React.ReactNode;
  importButton?: React.ReactNode;
  exportButton?: React.ReactNode;
  addOrderButton?: React.ReactNode;
  detailsView?: SingleBooleanChoiceArg<"detailsView">;
  className?: string;
}

function PlasmicTopBar__RenderFunc(props: {
  variants: PlasmicTopBar__VariantsArgs;
  args: PlasmicTopBar__ArgsType;
  overrides: PlasmicTopBar__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  return (
    <header
      data-plasmic-name={"topBar"}
      data-plasmic-override={overrides.topBar}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.topBar
      )}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"topSectionRow"}
        data-plasmic-override={overrides.topSectionRow}
        hasGap={true}
        className={classNames(projectcss.all, sty.topSectionRow, {
          [sty.topSectionRowdetailsView]: hasVariant(
            variants,
            "detailsView",
            "detailsView"
          )
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <CompnavBarlinkiconordersDarkIcon
              className={classNames(projectcss.all, sty.svg___3F4Ld)}
              role={"img"}
            />
          ),

          value: args.ordersIcon
        })}

        <h1
          data-plasmic-name={"pageTitleH1"}
          data-plasmic-override={overrides.pageTitleH1}
          className={classNames(
            projectcss.all,
            projectcss.h1,
            sty.pageTitleH1,
            "page-title" as const
          )}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Orders",
            value: args.children,
            className: classNames(sty.slotTargetChildren, {
              [sty.slotTargetChildrendetailsView]: hasVariant(
                variants,
                "detailsView",
                "detailsView"
              )
            })
          })}
        </h1>
      </p.Stack>

      <p.Stack
        as={"div"}
        data-plasmic-name={"bottomSectionRow"}
        data-plasmic-override={overrides.bottomSectionRow}
        hasGap={true}
        className={classNames(projectcss.all, sty.bottomSectionRow, {
          [sty.bottomSectionRowdetailsView]: hasVariant(
            variants,
            "detailsView",
            "detailsView"
          )
        })}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"buttonGroup"}
          data-plasmic-override={overrides.buttonGroup}
          hasGap={true}
          className={classNames(projectcss.all, sty.buttonGroup, {
            [sty.buttonGroupdetailsView]: hasVariant(
              variants,
              "detailsView",
              "detailsView"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <Button
                className={classNames("__wab_instance", sty.button___2Hk0J)}
                color={"link" as const}
                showStartIcon={true}
                startIcon={
                  <IcondownIconIcon
                    className={classNames(projectcss.all, sty.svg__mWpzi)}
                    role={"img"}
                  />
                }
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__l1T1K
                  )}
                >
                  {"Export"}
                </div>
              </Button>
            ),

            value: args.exportButton
          })}

          {p.renderPlasmicSlot({
            defaultContents: (
              <Button
                className={classNames("__wab_instance", sty.button___6RGh1)}
                color={"link" as const}
                showStartIcon={true}
                startIcon={
                  <IconimportIconIcon
                    className={classNames(projectcss.all, sty.svg___2Be50)}
                    role={"img"}
                  />
                }
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__vqLHk
                  )}
                >
                  {"Import"}
                </div>
              </Button>
            ),

            value: args.importButton
          })}
        </p.Stack>

        {p.renderPlasmicSlot({
          defaultContents: (
            <Button
              className={classNames("__wab_instance", sty.button__tvEmj)}
              color={"teal" as const}
              showStartIcon={true}
              startIcon={
                <AppIcons5Icon
                  className={classNames(projectcss.all, sty.svg__mSfyc)}
                  role={"img"}
                />
              }
            >
              {"Add an order"}
            </Button>
          ),

          value: args.addOrderButton
        })}
      </p.Stack>
    </header>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  topBar: [
    "topBar",
    "topSectionRow",
    "pageTitleH1",
    "bottomSectionRow",
    "buttonGroup"
  ],
  topSectionRow: ["topSectionRow", "pageTitleH1"],
  pageTitleH1: ["pageTitleH1"],
  bottomSectionRow: ["bottomSectionRow", "buttonGroup"],
  buttonGroup: ["buttonGroup"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  topBar: "header";
  topSectionRow: "div";
  pageTitleH1: "h1";
  bottomSectionRow: "div";
  buttonGroup: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTopBar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTopBar__VariantsArgs;
    args?: PlasmicTopBar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTopBar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTopBar__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTopBar__ArgProps,
      internalVariantPropNames: PlasmicTopBar__VariantProps
    });

    return PlasmicTopBar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "topBar") {
    func.displayName = "PlasmicTopBar";
  } else {
    func.displayName = `PlasmicTopBar.${nodeName}`;
  }
  return func;
}

export const PlasmicTopBar = Object.assign(
  // Top-level PlasmicTopBar renders the root element
  makeNodeComponent("topBar"),
  {
    // Helper components rendering sub-elements
    topSectionRow: makeNodeComponent("topSectionRow"),
    pageTitleH1: makeNodeComponent("pageTitleH1"),
    bottomSectionRow: makeNodeComponent("bottomSectionRow"),
    buttonGroup: makeNodeComponent("buttonGroup"),

    // Metadata about props expected for PlasmicTopBar
    internalVariantProps: PlasmicTopBar__VariantProps,
    internalArgProps: PlasmicTopBar__ArgProps
  }
);

export default PlasmicTopBar;
/* prettier-ignore-end */
