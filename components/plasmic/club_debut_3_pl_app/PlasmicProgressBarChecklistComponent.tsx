// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: n7PMUCBoe1fA7rXcBRi5FH
// Component: TsHwP6Mnb0
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ProgressChecklistItem from "../../ProgressChecklistItem"; // plasmic-import: kpy9f9nBnCX/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_club_debut_3_pl_app.module.css"; // plasmic-import: n7PMUCBoe1fA7rXcBRi5FH/projectcss
import sty from "./PlasmicProgressBarChecklistComponent.module.css"; // plasmic-import: TsHwP6Mnb0/css

export type PlasmicProgressBarChecklistComponent__VariantMembers = {};

export type PlasmicProgressBarChecklistComponent__VariantsArgs = {};
type VariantPropType = keyof PlasmicProgressBarChecklistComponent__VariantsArgs;
export const PlasmicProgressBarChecklistComponent__VariantProps =
  new Array<VariantPropType>();

export type PlasmicProgressBarChecklistComponent__ArgsType = {
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  slot5?: React.ReactNode;
  slot6?: React.ReactNode;
  slot8?: React.ReactNode;
  slot9?: React.ReactNode;
  slot11?: React.ReactNode;
  slot12?: React.ReactNode;
};

type ArgPropType = keyof PlasmicProgressBarChecklistComponent__ArgsType;
export const PlasmicProgressBarChecklistComponent__ArgProps =
  new Array<ArgPropType>(
    "slot2",
    "slot3",
    "slot5",
    "slot6",
    "slot8",
    "slot9",
    "slot11",
    "slot12"
  );

export type PlasmicProgressBarChecklistComponent__OverridesType = {
  setupChecklistProgressBar?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
};

export interface DefaultProgressBarChecklistComponentProps {
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  slot5?: React.ReactNode;
  slot6?: React.ReactNode;
  slot8?: React.ReactNode;
  slot9?: React.ReactNode;
  slot11?: React.ReactNode;
  slot12?: React.ReactNode;
  className?: string;
}

function PlasmicProgressBarChecklistComponent__RenderFunc(props: {
  variants: PlasmicProgressBarChecklistComponent__VariantsArgs;
  args: PlasmicProgressBarChecklistComponent__ArgsType;
  overrides: PlasmicProgressBarChecklistComponent__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  return (
    <div
      data-plasmic-name={"setupChecklistProgressBar"}
      data-plasmic-override={overrides.setupChecklistProgressBar}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.setupChecklistProgressBar
      )}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <ProgressChecklistItem
          className={classNames(
            "__wab_instance",
            sty.progressChecklistItem__jsasX
          )}
          slot2={p.renderPlasmicSlot({
            defaultContents: "Registration",
            value: args.slot2
          })}
          slot3={p.renderPlasmicSlot({
            defaultContents: "Verification",
            value: args.slot3
          })}
          slot4={
            true ? (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__coVBb
                )}
              >
                {"Verification"}
              </div>
            ) : null
          }
          slot5={
            true ? (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__u2Tz0
                )}
              >
                {"Verification"}
              </div>
            ) : null
          }
        />

        <ProgressChecklistItem
          className={classNames(
            "__wab_instance",
            sty.progressChecklistItem__xao1
          )}
          slot2={p.renderPlasmicSlot({
            defaultContents: "Registration",
            value: args.slot5
          })}
          slot3={p.renderPlasmicSlot({
            defaultContents: "Verification",
            value: args.slot6
          })}
          slot4={"Payment Details"}
          slot5={"Add Staff"}
        />

        <ProgressChecklistItem
          className={classNames(
            "__wab_instance",
            sty.progressChecklistItem__unHwX
          )}
          slot2={p.renderPlasmicSlot({
            defaultContents: "Registration",
            value: args.slot8
          })}
          slot3={p.renderPlasmicSlot({
            defaultContents: "Verification",
            value: args.slot9
          })}
        />

        <ProgressChecklistItem
          className={classNames(
            "__wab_instance",
            sty.progressChecklistItem__yqdfS
          )}
          slot2={p.renderPlasmicSlot({
            defaultContents: "Registration",
            value: args.slot11
          })}
          slot3={p.renderPlasmicSlot({
            defaultContents: "Verification",
            value: args.slot12
          })}
        />
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  setupChecklistProgressBar: ["setupChecklistProgressBar", "freeBox"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  setupChecklistProgressBar: "div";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProgressBarChecklistComponent__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProgressBarChecklistComponent__VariantsArgs;
    args?: PlasmicProgressBarChecklistComponent__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit< // Specify variants directly as props
    PlasmicProgressBarChecklistComponent__VariantsArgs,
    ReservedPropsType
  > &
    // Specify args directly as props
    Omit<PlasmicProgressBarChecklistComponent__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicProgressBarChecklistComponent__ArgProps,
      internalVariantPropNames:
        PlasmicProgressBarChecklistComponent__VariantProps
    });

    return PlasmicProgressBarChecklistComponent__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "setupChecklistProgressBar") {
    func.displayName = "PlasmicProgressBarChecklistComponent";
  } else {
    func.displayName = `PlasmicProgressBarChecklistComponent.${nodeName}`;
  }
  return func;
}

export const PlasmicProgressBarChecklistComponent = Object.assign(
  // Top-level PlasmicProgressBarChecklistComponent renders the root element
  makeNodeComponent("setupChecklistProgressBar"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicProgressBarChecklistComponent
    internalVariantProps: PlasmicProgressBarChecklistComponent__VariantProps,
    internalArgProps: PlasmicProgressBarChecklistComponent__ArgProps
  }
);

export default PlasmicProgressBarChecklistComponent;
/* prettier-ignore-end */
