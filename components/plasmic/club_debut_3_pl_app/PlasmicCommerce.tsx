// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: n7PMUCBoe1fA7rXcBRi5FH
// Component: foeFB4AFYU
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_club_debut_3_pl_app.module.css"; // plasmic-import: n7PMUCBoe1fA7rXcBRi5FH/projectcss
import sty from "./PlasmicCommerce.module.css"; // plasmic-import: foeFB4AFYU/css

export type PlasmicCommerce__VariantMembers = {};

export type PlasmicCommerce__VariantsArgs = {};
type VariantPropType = keyof PlasmicCommerce__VariantsArgs;
export const PlasmicCommerce__VariantProps = new Array<VariantPropType>();

export type PlasmicCommerce__ArgsType = {};
type ArgPropType = keyof PlasmicCommerce__ArgsType;
export const PlasmicCommerce__ArgProps = new Array<ArgPropType>();

export type PlasmicCommerce__OverridesType = {
  commercePage?: p.Flex<"div">;
};

export interface DefaultCommerceProps {}

function PlasmicCommerce__RenderFunc(props: {
  variants: PlasmicCommerce__VariantsArgs;
  args: PlasmicCommerce__ArgsType;
  overrides: PlasmicCommerce__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  return (
    <React.Fragment>
      {}

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"commercePage"}
          data-plasmic-override={overrides.commercePage}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.commercePage
          )}
        />
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  commercePage: ["commercePage"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  commercePage: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCommerce__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCommerce__VariantsArgs;
    args?: PlasmicCommerce__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCommerce__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCommerce__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCommerce__ArgProps,
      internalVariantPropNames: PlasmicCommerce__VariantProps
    });

    return PlasmicCommerce__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "commercePage") {
    func.displayName = "PlasmicCommerce";
  } else {
    func.displayName = `PlasmicCommerce.${nodeName}`;
  }
  return func;
}

export const PlasmicCommerce = Object.assign(
  // Top-level PlasmicCommerce renders the root element
  makeNodeComponent("commercePage"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicCommerce
    internalVariantProps: PlasmicCommerce__VariantProps,
    internalArgProps: PlasmicCommerce__ArgProps
  }
);

export default PlasmicCommerce;
/* prettier-ignore-end */
