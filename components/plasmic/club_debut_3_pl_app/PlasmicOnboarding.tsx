// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: n7PMUCBoe1fA7rXcBRi5FH
// Component: vtUxvx0C36
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import TopBarOnBoarding from "../../TopBarOnBoarding"; // plasmic-import: QtFNmW8QSW/component
import UserCategoryQuestion from "../../UserCategoryQuestion"; // plasmic-import: jGkDgrZ3Zc/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_club_debut_3_pl_app.module.css"; // plasmic-import: n7PMUCBoe1fA7rXcBRi5FH/projectcss
import sty from "./PlasmicOnboarding.module.css"; // plasmic-import: vtUxvx0C36/css

import LogoIcon from "./icons/PlasmicIcon__Logo"; // plasmic-import: mWQ8Pw_ze5N/icon

export type PlasmicOnboarding__VariantMembers = {};

export type PlasmicOnboarding__VariantsArgs = {};
type VariantPropType = keyof PlasmicOnboarding__VariantsArgs;
export const PlasmicOnboarding__VariantProps = new Array<VariantPropType>();

export type PlasmicOnboarding__ArgsType = {};
type ArgPropType = keyof PlasmicOnboarding__ArgsType;
export const PlasmicOnboarding__ArgProps = new Array<ArgPropType>();

export type PlasmicOnboarding__OverridesType = {
  onboardingPage?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  topBarOnBoarding?: p.Flex<typeof TopBarOnBoarding>;
  whatBroughtYouTo?: p.Flex<"div">;
};

export interface DefaultOnboardingProps {}

function PlasmicOnboarding__RenderFunc(props: {
  variants: PlasmicOnboarding__VariantsArgs;
  args: PlasmicOnboarding__ArgsType;
  overrides: PlasmicOnboarding__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  return (
    <React.Fragment>
      {}

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"onboardingPage"}
          data-plasmic-override={overrides.onboardingPage}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.onboardingPage
          )}
        >
          <p.PlasmicImg
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={"730.232px" as const}
            displayMaxHeight={"none" as const}
            displayMaxWidth={"100%" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"452.862px" as const}
            loading={"lazy" as const}
            src={{
              src: "/plasmic/club_debut_3_pl_app/images/group3.svg",
              fullWidth: 452.862,
              fullHeight: 730.232,
              aspectRatio: 0.706681
            }}
          />

          <TopBarOnBoarding
            data-plasmic-name={"topBarOnBoarding"}
            data-plasmic-override={overrides.topBarOnBoarding}
            className={classNames("__wab_instance", sty.topBarOnBoarding)}
          />

          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__zXj81)}>
              <div
                data-plasmic-name={"whatBroughtYouTo"}
                data-plasmic-override={overrides.whatBroughtYouTo}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.whatBroughtYouTo
                )}
              >
                {"What brought you to Club Debut?"}
              </div>

              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__lzDb)}
                >
                  <UserCategoryQuestion
                    className={classNames(
                      "__wab_instance",
                      sty.userCategoryQuestion__jL1Ll
                    )}
                    textDefault3={
                      "I would like to earn money providing creative services"
                    }
                  />

                  <UserCategoryQuestion
                    className={classNames(
                      "__wab_instance",
                      sty.userCategoryQuestion__zc8Fd
                    )}
                    textDefault3={
                      "I need third party logistics service for my fashion brand"
                    }
                  />

                  <UserCategoryQuestion
                    className={classNames(
                      "__wab_instance",
                      sty.userCategoryQuestion__k7Dy
                    )}
                    textDefault3={"Iâ€™m starting a fashion company"}
                  />
                </p.Stack>
              ) : null}
            </div>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  onboardingPage: [
    "onboardingPage",
    "img",
    "topBarOnBoarding",
    "whatBroughtYouTo"
  ],
  img: ["img"],
  topBarOnBoarding: ["topBarOnBoarding"],
  whatBroughtYouTo: ["whatBroughtYouTo"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  onboardingPage: "div";
  img: typeof p.PlasmicImg;
  topBarOnBoarding: typeof TopBarOnBoarding;
  whatBroughtYouTo: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicOnboarding__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicOnboarding__VariantsArgs;
    args?: PlasmicOnboarding__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicOnboarding__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicOnboarding__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicOnboarding__ArgProps,
      internalVariantPropNames: PlasmicOnboarding__VariantProps
    });

    return PlasmicOnboarding__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "onboardingPage") {
    func.displayName = "PlasmicOnboarding";
  } else {
    func.displayName = `PlasmicOnboarding.${nodeName}`;
  }
  return func;
}

export const PlasmicOnboarding = Object.assign(
  // Top-level PlasmicOnboarding renders the root element
  makeNodeComponent("onboardingPage"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    topBarOnBoarding: makeNodeComponent("topBarOnBoarding"),
    whatBroughtYouTo: makeNodeComponent("whatBroughtYouTo"),

    // Metadata about props expected for PlasmicOnboarding
    internalVariantProps: PlasmicOnboarding__VariantProps,
    internalArgProps: PlasmicOnboarding__ArgProps
  }
);

export default PlasmicOnboarding;
/* prettier-ignore-end */
