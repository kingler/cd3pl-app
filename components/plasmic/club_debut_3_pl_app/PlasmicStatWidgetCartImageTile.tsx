// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: n7PMUCBoe1fA7rXcBRi5FH
// Component: QwLrSAW9KB
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: iZavS5akl9G/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_club_debut_3_pl_app.module.css"; // plasmic-import: n7PMUCBoe1fA7rXcBRi5FH/projectcss
import sty from "./PlasmicStatWidgetCartImageTile.module.css"; // plasmic-import: QwLrSAW9KB/css

import Warningsvg2Icon from "./icons/PlasmicIcon__Warningsvg2"; // plasmic-import: y008BQsg8/icon
import LineCopyIcon from "./icons/PlasmicIcon__LineCopy"; // plasmic-import: JA5oJt2p-Ar/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: dtW5sCNu7WP/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: zGfmmTFBuGj/icon

export type PlasmicStatWidgetCartImageTile__VariantMembers = {
  isSelected: "isSelected";
};

export type PlasmicStatWidgetCartImageTile__VariantsArgs = {
  isSelected?: SingleBooleanChoiceArg<"isSelected">;
};

type VariantPropType = keyof PlasmicStatWidgetCartImageTile__VariantsArgs;
export const PlasmicStatWidgetCartImageTile__VariantProps =
  new Array<VariantPropType>("isSelected");

export type PlasmicStatWidgetCartImageTile__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicStatWidgetCartImageTile__ArgsType;
export const PlasmicStatWidgetCartImageTile__ArgProps = new Array<ArgPropType>(
  "children"
);

export type PlasmicStatWidgetCartImageTile__OverridesType = {
  productImage?: p.Flex<"div">;
};

export interface DefaultStatWidgetCartImageTileProps {
  children?: React.ReactNode;
  isSelected?: SingleBooleanChoiceArg<"isSelected">;
  className?: string;
}

function PlasmicStatWidgetCartImageTile__RenderFunc(props: {
  variants: PlasmicStatWidgetCartImageTile__VariantsArgs;
  args: PlasmicStatWidgetCartImageTile__ArgsType;
  overrides: PlasmicStatWidgetCartImageTile__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  return (
    true ? (
      <div
        data-plasmic-name={"productImage"}
        data-plasmic-override={overrides.productImage}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.productImage,
          {
            [sty.productImageisSelected]: hasVariant(
              variants,
              "isSelected",
              "isSelected"
            )
          }
        )}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <div className={classNames(projectcss.all, sty.freeBox__zpiVn)}>
              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__r1NAq)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__ifs6)}
                    displayHeight={"100px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"100px" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/club_debut_3_pl_app/images/floridaTshirtWhitepng.png",
                      fullWidth: 1588,
                      fullHeight: 1608,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              ) : null}
              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__riGz)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fumWi
                    )}
                  >
                    {"sku:"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ldNj4
                    )}
                  >
                    {"Florida Collage T-shirt White 2XL"}
                  </div>
                </div>
              ) : null}
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__olPiI)}
                >
                  {true ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__yaoF7)}
                    >
                      <Warningsvg2Icon
                        className={classNames(projectcss.all, sty.svg__n90A3)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__sLcb
                        )}
                      >
                        {"Low"}
                      </div>
                    </p.Stack>
                  ) : null}
                  {true ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox___7D3C)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__z5KTh
                        )}
                      >
                        {"40 "}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__x3Kjh
                        )}
                      >
                        {"of"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__zuxAy
                        )}
                      >
                        {"200"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__urxpc
                        )}
                      >
                        {"left"}
                      </div>
                    </p.Stack>
                  ) : null}
                </p.Stack>
              ) : null}
              {true ? (
                <LineCopyIcon
                  className={classNames(projectcss.all, sty.svg___3LuCv)}
                  role={"img"}
                />
              ) : null}
              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__ol1Ko)}>
                  <Button
                    className={classNames("__wab_instance", sty.button__dss3T)}
                    color={"link" as const}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__bN7V
                      )}
                    >
                      {"Create PO"}
                    </div>
                  </Button>

                  <Button
                    className={classNames("__wab_instance", sty.button___3Axqt)}
                    color={"link" as const}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nHxRr
                      )}
                    >
                      {"Add to PO"}
                    </div>
                  </Button>
                </div>
              ) : null}
            </div>
          ),

          value: args.children
        })}
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  productImage: ["productImage"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  productImage: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicStatWidgetCartImageTile__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicStatWidgetCartImageTile__VariantsArgs;
    args?: PlasmicStatWidgetCartImageTile__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicStatWidgetCartImageTile__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicStatWidgetCartImageTile__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicStatWidgetCartImageTile__ArgProps,
      internalVariantPropNames: PlasmicStatWidgetCartImageTile__VariantProps
    });

    return PlasmicStatWidgetCartImageTile__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "productImage") {
    func.displayName = "PlasmicStatWidgetCartImageTile";
  } else {
    func.displayName = `PlasmicStatWidgetCartImageTile.${nodeName}`;
  }
  return func;
}

export const PlasmicStatWidgetCartImageTile = Object.assign(
  // Top-level PlasmicStatWidgetCartImageTile renders the root element
  makeNodeComponent("productImage"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicStatWidgetCartImageTile
    internalVariantProps: PlasmicStatWidgetCartImageTile__VariantProps,
    internalArgProps: PlasmicStatWidgetCartImageTile__ArgProps
  }
);

export default PlasmicStatWidgetCartImageTile;
/* prettier-ignore-end */
