// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: n7PMUCBoe1fA7rXcBRi5FH
// Component: 8lLvK4imIs
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import SidePanelComponent from "../../SidePanelComponent"; // plasmic-import: kMAT7d_nPjC/component
import TopBarOnBoarding from "../../TopBarOnBoarding"; // plasmic-import: QtFNmW8QSW/component
import Button from "../../Button"; // plasmic-import: iZavS5akl9G/component

import { useScreenVariants as useScreenVariants_6JfnloVhzca } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 6JfnloVhzca/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_club_debut_3_pl_app.module.css"; // plasmic-import: n7PMUCBoe1fA7rXcBRi5FH/projectcss
import sty from "./PlasmicWelcome.module.css"; // plasmic-import: 8lLvK4imIs/css

import LogoIcon from "./icons/PlasmicIcon__Logo"; // plasmic-import: mWQ8Pw_ze5N/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: dtW5sCNu7WP/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: zGfmmTFBuGj/icon

export type PlasmicWelcome__VariantMembers = {};

export type PlasmicWelcome__VariantsArgs = {};
type VariantPropType = keyof PlasmicWelcome__VariantsArgs;
export const PlasmicWelcome__VariantProps = new Array<VariantPropType>();

export type PlasmicWelcome__ArgsType = {
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  slot6?: React.ReactNode;
  slot7?: React.ReactNode;
  slot8?: React.ReactNode;
  slot9?: React.ReactNode;
  slot10?: React.ReactNode;
  slot11?: React.ReactNode;
  slot12?: React.ReactNode;
  slot13?: React.ReactNode;
  slot14?: React.ReactNode;
  slot16?: React.ReactNode;
  slot17?: React.ReactNode;
};

type ArgPropType = keyof PlasmicWelcome__ArgsType;
export const PlasmicWelcome__ArgProps = new Array<ArgPropType>(
  "slot2",
  "slot3",
  "slot6",
  "slot7",
  "slot8",
  "slot9",
  "slot10",
  "slot11",
  "slot12",
  "slot13",
  "slot14",
  "slot16",
  "slot17"
);

export type PlasmicWelcome__OverridesType = {
  welcomePage?: p.Flex<"div">;
  sidePanelComponent?: p.Flex<typeof SidePanelComponent>;
  vGroup?: p.Flex<"div">;
  topBarOnBoarding?: p.Flex<typeof TopBarOnBoarding>;
  h1?: p.Flex<"h1">;
  whatBroughtYouTo?: p.Flex<"div">;
  button?: p.Flex<typeof Button>;
};

export interface DefaultWelcomeProps {}

function PlasmicWelcome__RenderFunc(props: {
  variants: PlasmicWelcome__VariantsArgs;
  args: PlasmicWelcome__ArgsType;
  overrides: PlasmicWelcome__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6JfnloVhzca()
  });

  return (
    <React.Fragment>
      {}

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"welcomePage"}
          data-plasmic-override={overrides.welcomePage}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.welcomePage
          )}
        >
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__zeF71)}>
              {(
                hasVariant(globalVariants, "screen", "mobile") ? true : true
              ) ? (
                <SidePanelComponent
                  data-plasmic-name={"sidePanelComponent"}
                  data-plasmic-override={overrides.sidePanelComponent}
                  className={classNames(
                    "__wab_instance",
                    sty.sidePanelComponent
                  )}
                  slot={"Account"}
                />
              ) : null}
              {true ? (
                <div
                  data-plasmic-name={"vGroup"}
                  data-plasmic-override={overrides.vGroup}
                  className={classNames(projectcss.all, sty.vGroup)}
                >
                  <TopBarOnBoarding
                    data-plasmic-name={"topBarOnBoarding"}
                    data-plasmic-override={overrides.topBarOnBoarding}
                    className={classNames(
                      "__wab_instance",
                      sty.topBarOnBoarding
                    )}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "mobile")
                        ? true
                        : true
                    ) ? (
                      <LogoIcon
                        className={classNames(projectcss.all, sty.svg__iBsPz)}
                        role={"img"}
                      />
                    ) : null}
                  </TopBarOnBoarding>

                  <h1
                    data-plasmic-name={"h1"}
                    data-plasmic-override={overrides.h1}
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobile")
                      ? "Welcome on board Larry"
                      : "Welcome on board Larry"}
                  </h1>

                  <div
                    data-plasmic-name={"whatBroughtYouTo"}
                    data-plasmic-override={overrides.whatBroughtYouTo}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.whatBroughtYouTo
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobile")
                      ? "Let’s start by setting up your business, product details, and initial production run"
                      : "Let’s start by setting up your business, product details, and initial production run"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__uwWhb
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobile")
                      ? "Account Setup Checklist"
                      : "Account Setup Checklist"}
                  </div>

                  {(
                    hasVariant(globalVariants, "screen", "mobile") ? true : true
                  ) ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox___2YZH)}
                    >
                      {true ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__qVwu
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__i1Fty
                            )}
                          >
                            <ChecksvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__l4ZS
                              )}
                              role={"img"}
                            />
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___7Jz9B
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__vwN9T
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___5YbZx
                                )}
                              >
                                {"Create a Club Debut 3PL account"}
                              </div>
                            </div>

                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__txUxe
                              )}
                            >
                              {(
                                hasVariant(globalVariants, "screen", "mobile")
                                  ? true
                                  : true
                              ) ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__z3Jr5
                                  )}
                                >
                                  {p.renderPlasmicSlot({
                                    defaultContents: "Registration",
                                    value: args.slot2,
                                    className: classNames(sty.slotTargetSlot2)
                                  })}
                                </div>
                              ) : null}
                              {(
                                hasVariant(globalVariants, "screen", "mobile")
                                  ? true
                                  : true
                              ) ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___9ZNn
                                  )}
                                >
                                  {p.renderPlasmicSlot({
                                    defaultContents: "Location",
                                    value: args.slot3,
                                    className: classNames(sty.slotTargetSlot3)
                                  })}
                                </div>
                              ) : null}
                            </p.Stack>
                          </div>
                        </div>
                      ) : null}
                      {true ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__jRsMc
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__wOfz
                            )}
                          >
                            <ChecksvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__jCdgp
                              )}
                              role={"img"}
                            />
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__aPw9
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___7EUo
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___49OHl
                                )}
                              >
                                {"Add your company details"}
                              </div>
                            </div>

                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___4GKwh
                              )}
                            >
                              {(
                                hasVariant(globalVariants, "screen", "mobile")
                                  ? true
                                  : true
                              ) ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__xdyou
                                  )}
                                >
                                  {p.renderPlasmicSlot({
                                    defaultContents: "General Information",
                                    value: args.slot6,
                                    className: classNames(sty.slotTargetSlot6)
                                  })}
                                </div>
                              ) : null}
                              {(
                                hasVariant(globalVariants, "screen", "mobile")
                                  ? true
                                  : true
                              ) ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__u9Ppb
                                  )}
                                >
                                  {p.renderPlasmicSlot({
                                    defaultContents: "Location",
                                    value: args.slot7,
                                    className: classNames(sty.slotTargetSlot7)
                                  })}
                                </div>
                              ) : null}
                              {(
                                hasVariant(globalVariants, "screen", "mobile")
                                  ? true
                                  : true
                              ) ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__kBs0X
                                  )}
                                >
                                  {p.renderPlasmicSlot({
                                    defaultContents: "Payment Details",
                                    value: args.slot8,
                                    className: classNames(sty.slotTargetSlot8)
                                  })}
                                </div>
                              ) : null}
                              {(
                                hasVariant(globalVariants, "screen", "mobile")
                                  ? true
                                  : true
                              ) ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__rppRk
                                  )}
                                >
                                  {p.renderPlasmicSlot({
                                    defaultContents: "Add Staff",
                                    value: args.slot9,
                                    className: classNames(sty.slotTargetSlot9)
                                  })}
                                </div>
                              ) : null}
                            </p.Stack>
                          </div>
                        </div>
                      ) : null}
                      {(
                        hasVariant(globalVariants, "screen", "mobile")
                          ? true
                          : true
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__zveUq
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__xNgEh
                            )}
                          >
                            <ChecksvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__h17XW
                              )}
                              role={"img"}
                            />
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___3IkZ7
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__buhZg
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___4SuIx
                                )}
                              >
                                {"Add your products"}
                              </div>
                            </div>

                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__rshde
                              )}
                            >
                              {(
                                hasVariant(globalVariants, "screen", "mobile")
                                  ? true
                                  : true
                              ) ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__efv43
                                  )}
                                >
                                  {p.renderPlasmicSlot({
                                    defaultContents: "Add or Import products",
                                    value: args.slot10,
                                    className: classNames(sty.slotTargetSlot10)
                                  })}
                                </div>
                              ) : null}
                              {(
                                hasVariant(globalVariants, "screen", "mobile")
                                  ? true
                                  : true
                              ) ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__ui83B
                                  )}
                                >
                                  {p.renderPlasmicSlot({
                                    defaultContents: "Create Collection",
                                    value: args.slot11,
                                    className: classNames(sty.slotTargetSlot11)
                                  })}
                                </div>
                              ) : null}
                              {(
                                hasVariant(globalVariants, "screen", "mobile")
                                  ? true
                                  : true
                              ) ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__gYcB
                                  )}
                                >
                                  {p.renderPlasmicSlot({
                                    defaultContents: "Add Product Variances",
                                    value: args.slot12,
                                    className: classNames(sty.slotTargetSlot12)
                                  })}
                                </div>
                              ) : null}
                              {(
                                hasVariant(globalVariants, "screen", "mobile")
                                  ? true
                                  : true
                              ) ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__pUuCm
                                  )}
                                >
                                  {p.renderPlasmicSlot({
                                    defaultContents: "Verification",
                                    value: args.slot13,
                                    className: classNames(sty.slotTargetSlot13)
                                  })}
                                </div>
                              ) : null}
                            </p.Stack>
                          </div>
                        </div>
                      ) : null}
                      {true ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__oppYc
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__r6S4R
                            )}
                          >
                            <ChecksvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__wMvQg
                              )}
                              role={"img"}
                            />
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__faBpK
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__yRkzr
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__lawM
                                )}
                              >
                                {hasVariant(globalVariants, "screen", "mobile")
                                  ? "Setup your store and start selling"
                                  : "Setup your store and start selling"}
                              </div>
                            </div>

                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__ctmOj
                              )}
                            >
                              {(
                                hasVariant(globalVariants, "screen", "mobile")
                                  ? true
                                  : true
                              ) ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__nDgRu
                                  )}
                                >
                                  {p.renderPlasmicSlot({
                                    defaultContents: "eCommerce store details",
                                    value: args.slot14,
                                    className: classNames(sty.slotTargetSlot14)
                                  })}
                                </div>
                              ) : null}
                              {(
                                hasVariant(globalVariants, "screen", "mobile")
                                  ? true
                                  : true
                              ) ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___8Qpd
                                  )}
                                >
                                  {p.renderPlasmicSlot({
                                    defaultContents: "Site's web domain",
                                    value: args.slot16,
                                    className: classNames(sty.slotTargetSlot16)
                                  })}
                                </div>
                              ) : null}
                              {(
                                hasVariant(globalVariants, "screen", "mobile")
                                  ? true
                                  : true
                              ) ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__sKjHk
                                  )}
                                >
                                  {p.renderPlasmicSlot({
                                    defaultContents: "Setup merchant account",
                                    value: args.slot17,
                                    className: classNames(sty.slotTargetSlot17)
                                  })}
                                </div>
                              ) : null}
                            </p.Stack>
                          </div>
                        </div>
                      ) : null}
                    </div>
                  ) : null}

                  <Button
                    data-plasmic-name={"button"}
                    data-plasmic-override={overrides.button}
                    className={classNames("__wab_instance", sty.button)}
                    color={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? ("orange" as const)
                        : ("orange" as const)
                    }
                    showEndIcon={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? true
                        : true
                    }
                  >
                    {"Get Started"}
                  </Button>
                </div>
              ) : null}
            </div>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  welcomePage: [
    "welcomePage",
    "sidePanelComponent",
    "vGroup",
    "topBarOnBoarding",
    "h1",
    "whatBroughtYouTo",
    "button"
  ],
  sidePanelComponent: ["sidePanelComponent"],
  vGroup: ["vGroup", "topBarOnBoarding", "h1", "whatBroughtYouTo", "button"],
  topBarOnBoarding: ["topBarOnBoarding"],
  h1: ["h1"],
  whatBroughtYouTo: ["whatBroughtYouTo"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  welcomePage: "div";
  sidePanelComponent: typeof SidePanelComponent;
  vGroup: "div";
  topBarOnBoarding: typeof TopBarOnBoarding;
  h1: "h1";
  whatBroughtYouTo: "div";
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicWelcome__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicWelcome__VariantsArgs;
    args?: PlasmicWelcome__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicWelcome__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicWelcome__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicWelcome__ArgProps,
      internalVariantPropNames: PlasmicWelcome__VariantProps
    });

    return PlasmicWelcome__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "welcomePage") {
    func.displayName = "PlasmicWelcome";
  } else {
    func.displayName = `PlasmicWelcome.${nodeName}`;
  }
  return func;
}

export const PlasmicWelcome = Object.assign(
  // Top-level PlasmicWelcome renders the root element
  makeNodeComponent("welcomePage"),
  {
    // Helper components rendering sub-elements
    sidePanelComponent: makeNodeComponent("sidePanelComponent"),
    vGroup: makeNodeComponent("vGroup"),
    topBarOnBoarding: makeNodeComponent("topBarOnBoarding"),
    h1: makeNodeComponent("h1"),
    whatBroughtYouTo: makeNodeComponent("whatBroughtYouTo"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicWelcome
    internalVariantProps: PlasmicWelcome__VariantProps,
    internalArgProps: PlasmicWelcome__ArgProps
  }
);

export default PlasmicWelcome;
/* prettier-ignore-end */
