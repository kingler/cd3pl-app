// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: n7PMUCBoe1fA7rXcBRi5FH
// Component: kpy9f9nBnCX
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_club_debut_3_pl_app.module.css"; // plasmic-import: n7PMUCBoe1fA7rXcBRi5FH/projectcss
import sty from "./PlasmicProgressChecklistItem.module.css"; // plasmic-import: kpy9f9nBnCX/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: dtW5sCNu7WP/icon

export type PlasmicProgressChecklistItem__VariantMembers = {
  competed: "competed";
};

export type PlasmicProgressChecklistItem__VariantsArgs = {
  competed?: SingleBooleanChoiceArg<"competed">;
};

type VariantPropType = keyof PlasmicProgressChecklistItem__VariantsArgs;
export const PlasmicProgressChecklistItem__VariantProps =
  new Array<VariantPropType>("competed");

export type PlasmicProgressChecklistItem__ArgsType = {
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  slot4?: React.ReactNode;
  slot5?: React.ReactNode;
};

type ArgPropType = keyof PlasmicProgressChecklistItem__ArgsType;
export const PlasmicProgressChecklistItem__ArgProps = new Array<ArgPropType>(
  "slot2",
  "slot3",
  "slot4",
  "slot5"
);

export type PlasmicProgressChecklistItem__OverridesType = {
  setupChecklistItem?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
  text?: p.Flex<"div">;
};

export interface DefaultProgressChecklistItemProps {
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  slot4?: React.ReactNode;
  slot5?: React.ReactNode;
  competed?: SingleBooleanChoiceArg<"competed">;
  className?: string;
}

function PlasmicProgressChecklistItem__RenderFunc(props: {
  variants: PlasmicProgressChecklistItem__VariantsArgs;
  args: PlasmicProgressChecklistItem__ArgsType;
  overrides: PlasmicProgressChecklistItem__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  return (
    <div
      data-plasmic-name={"setupChecklistItem"}
      data-plasmic-override={overrides.setupChecklistItem}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.setupChecklistItem
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__aRbm1, {
          [sty.freeBoxcompeted__aRbm1YoPmZ]: hasVariant(
            variants,
            "competed",
            "competed"
          )
        })}
      >
        <ChecksvgIcon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(projectcss.all, sty.svg, {
            [sty.svgcompeted]: hasVariant(variants, "competed", "competed")
          })}
          role={"img"}
        />
      </div>

      <div className={classNames(projectcss.all, sty.freeBox__mx1KS)}>
        <div className={classNames(projectcss.all, sty.freeBox__vhrBd)}>
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text
            )}
          >
            {"Create a Club Debut 3PL account"}
          </div>
        </div>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___6Bxo0)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__hRkR)}>
            {p.renderPlasmicSlot({
              defaultContents: "Registration",
              value: args.slot2,
              className: classNames(sty.slotTargetSlot2)
            })}
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__k4Lda)}>
            {p.renderPlasmicSlot({
              defaultContents: "Verification",
              value: args.slot3,
              className: classNames(sty.slotTargetSlot3, {
                [sty.slotTargetSlot3competed]: hasVariant(
                  variants,
                  "competed",
                  "competed"
                )
              })
            })}
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__mUcw)}>
            {p.renderPlasmicSlot({
              defaultContents: "Verification",
              value: args.slot4,
              className: classNames(sty.slotTargetSlot4, {
                [sty.slotTargetSlot4competed]: hasVariant(
                  variants,
                  "competed",
                  "competed"
                )
              })
            })}
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__mpyZ9)}>
            {p.renderPlasmicSlot({
              defaultContents: "Verification",
              value: args.slot5,
              className: classNames(sty.slotTargetSlot5, {
                [sty.slotTargetSlot5competed]: hasVariant(
                  variants,
                  "competed",
                  "competed"
                )
              })
            })}
          </div>
        </p.Stack>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  setupChecklistItem: ["setupChecklistItem", "svg", "text"],
  svg: ["svg"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  setupChecklistItem: "div";
  svg: "svg";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProgressChecklistItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProgressChecklistItem__VariantsArgs;
    args?: PlasmicProgressChecklistItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProgressChecklistItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicProgressChecklistItem__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicProgressChecklistItem__ArgProps,
      internalVariantPropNames: PlasmicProgressChecklistItem__VariantProps
    });

    return PlasmicProgressChecklistItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "setupChecklistItem") {
    func.displayName = "PlasmicProgressChecklistItem";
  } else {
    func.displayName = `PlasmicProgressChecklistItem.${nodeName}`;
  }
  return func;
}

export const PlasmicProgressChecklistItem = Object.assign(
  // Top-level PlasmicProgressChecklistItem renders the root element
  makeNodeComponent("setupChecklistItem"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicProgressChecklistItem
    internalVariantProps: PlasmicProgressChecklistItem__VariantProps,
    internalArgProps: PlasmicProgressChecklistItem__ArgProps
  }
);

export default PlasmicProgressChecklistItem;
/* prettier-ignore-end */
