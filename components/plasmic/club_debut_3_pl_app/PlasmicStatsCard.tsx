// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: n7PMUCBoe1fA7rXcBRi5FH
// Component: V8KmQ7KGSy
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_club_debut_3_pl_app.module.css"; // plasmic-import: n7PMUCBoe1fA7rXcBRi5FH/projectcss
import sty from "./PlasmicStatsCard.module.css"; // plasmic-import: V8KmQ7KGSy/css

import CloseIconsvgIcon from "./icons/PlasmicIcon__CloseIconsvg"; // plasmic-import: u9ToXHOYu/icon
import VectorsvgIcon from "./icons/PlasmicIcon__Vectorsvg"; // plasmic-import: JU3oeLTyS/icon
import LineIcon from "./icons/PlasmicIcon__Line"; // plasmic-import: aQ7cQkdB4R/icon

export type PlasmicStatsCard__VariantMembers = {};

export type PlasmicStatsCard__VariantsArgs = {};
type VariantPropType = keyof PlasmicStatsCard__VariantsArgs;
export const PlasmicStatsCard__VariantProps = new Array<VariantPropType>();

export type PlasmicStatsCard__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  totalRevenu?: React.ReactNode;
};

type ArgPropType = keyof PlasmicStatsCard__ArgsType;
export const PlasmicStatsCard__ArgProps = new Array<ArgPropType>(
  "children",
  "slot",
  "totalRevenu"
);

export type PlasmicStatsCard__OverridesType = {
  orderStatisticCard?: p.Flex<"div">;
  topSection?: p.Flex<"div">;
  closeButton?: p.Flex<"button">;
  grabIcon?: p.Flex<"svg">;
  cardTitle?: p.Flex<"div">;
  totalOrders?: p.Flex<"h2">;
  freeBox?: p.Flex<"div">;
  container?: p.Flex<"div">;
  text2?: p.Flex<"h3">;
  text?: p.Flex<"p">;
};

export interface DefaultStatsCardProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  totalRevenu?: React.ReactNode;
  className?: string;
}

function PlasmicStatsCard__RenderFunc(props: {
  variants: PlasmicStatsCard__VariantsArgs;
  args: PlasmicStatsCard__ArgsType;
  overrides: PlasmicStatsCard__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  return (
    <div
      data-plasmic-name={"orderStatisticCard"}
      data-plasmic-override={overrides.orderStatisticCard}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.orderStatisticCard
      )}
    >
      {true ? (
        <div
          data-plasmic-name={"topSection"}
          data-plasmic-override={overrides.topSection}
          className={classNames(projectcss.all, sty.topSection)}
        >
          {true ? (
            <button
              data-plasmic-name={"closeButton"}
              data-plasmic-override={overrides.closeButton}
              className={classNames(
                projectcss.all,
                projectcss.button,
                sty.closeButton
              )}
            >
              <CloseIconsvgIcon
                className={classNames(projectcss.all, sty.svg__ePmKw)}
                role={"img"}
              />
            </button>
          ) : null}

          <VectorsvgIcon
            data-plasmic-name={"grabIcon"}
            data-plasmic-override={overrides.grabIcon}
            className={classNames(projectcss.all, sty.grabIcon)}
            role={"img"}
          />
        </div>
      ) : null}

      <div
        data-plasmic-name={"cardTitle"}
        data-plasmic-override={overrides.cardTitle}
        className={classNames(projectcss.all, sty.cardTitle)}
      >
        {p.renderPlasmicSlot({
          defaultContents: "All Orders",
          value: args.children,
          className: classNames(sty.slotTargetChildren)
        })}
      </div>

      <h2
        data-plasmic-name={"totalOrders"}
        data-plasmic-override={overrides.totalOrders}
        className={classNames(projectcss.all, projectcss.h2, sty.totalOrders)}
      >
        {p.renderPlasmicSlot({
          defaultContents: "122,472",
          value: args.slot,
          className: classNames(sty.slotTargetSlot)
        })}
      </h2>

      <LineIcon
        className={classNames(projectcss.all, sty.svg___1TfjY)}
        role={"img"}
      />

      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        {p.renderPlasmicSlot({
          defaultContents: "$1.8 mil",
          value: args.totalRevenu,
          className: classNames(sty.slotTargetTotalRevenu)
        })}
      </div>

      <div
        data-plasmic-name={"container"}
        data-plasmic-override={overrides.container}
        className={classNames(projectcss.all, sty.container)}
      >
        <h3
          data-plasmic-name={"text2"}
          data-plasmic-override={overrides.text2}
          className={classNames(
            projectcss.all,
            projectcss.h3,
            projectcss.__wab_text,
            sty.text2
          )}
        >
          {"Total Revenue"}
        </h3>

        <p
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.p,
            projectcss.__wab_text,
            sty.text
          )}
        >
          {"To Date"}
        </p>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  orderStatisticCard: [
    "orderStatisticCard",
    "topSection",
    "closeButton",
    "grabIcon",
    "cardTitle",
    "totalOrders",
    "freeBox",
    "container",
    "text2",
    "text"
  ],
  topSection: ["topSection", "closeButton", "grabIcon"],
  closeButton: ["closeButton"],
  grabIcon: ["grabIcon"],
  cardTitle: ["cardTitle"],
  totalOrders: ["totalOrders"],
  freeBox: ["freeBox"],
  container: ["container", "text2", "text"],
  text2: ["text2"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  orderStatisticCard: "div";
  topSection: "div";
  closeButton: "button";
  grabIcon: "svg";
  cardTitle: "div";
  totalOrders: "h2";
  freeBox: "div";
  container: "div";
  text2: "h3";
  text: "p";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicStatsCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicStatsCard__VariantsArgs;
    args?: PlasmicStatsCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicStatsCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicStatsCard__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicStatsCard__ArgProps,
      internalVariantPropNames: PlasmicStatsCard__VariantProps
    });

    return PlasmicStatsCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "orderStatisticCard") {
    func.displayName = "PlasmicStatsCard";
  } else {
    func.displayName = `PlasmicStatsCard.${nodeName}`;
  }
  return func;
}

export const PlasmicStatsCard = Object.assign(
  // Top-level PlasmicStatsCard renders the root element
  makeNodeComponent("orderStatisticCard"),
  {
    // Helper components rendering sub-elements
    topSection: makeNodeComponent("topSection"),
    closeButton: makeNodeComponent("closeButton"),
    grabIcon: makeNodeComponent("grabIcon"),
    cardTitle: makeNodeComponent("cardTitle"),
    totalOrders: makeNodeComponent("totalOrders"),
    freeBox: makeNodeComponent("freeBox"),
    container: makeNodeComponent("container"),
    text2: makeNodeComponent("text2"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicStatsCard
    internalVariantProps: PlasmicStatsCard__VariantProps,
    internalArgProps: PlasmicStatsCard__ArgProps
  }
);

export default PlasmicStatsCard;
/* prettier-ignore-end */
