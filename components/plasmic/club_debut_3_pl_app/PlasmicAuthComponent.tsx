// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: n7PMUCBoe1fA7rXcBRi5FH
// Component: nY2U_rP0qI
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import TextInput from "../../TextInput"; // plasmic-import: Icw6OCd19wm/component
import Cd3PlButton from "../../Cd3PlButton"; // plasmic-import: fl4IwtHf9j/component
import Button from "../../Button"; // plasmic-import: iZavS5akl9G/component

import { useScreenVariants as useScreenVariants_6JfnloVhzca } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 6JfnloVhzca/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_club_debut_3_pl_app.module.css"; // plasmic-import: n7PMUCBoe1fA7rXcBRi5FH/projectcss
import sty from "./PlasmicAuthComponent.module.css"; // plasmic-import: nY2U_rP0qI/css

import MailRound24PxsvgIcon from "./icons/PlasmicIcon__MailRound24Pxsvg"; // plasmic-import: rr6rX77IeQ/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: dtW5sCNu7WP/icon
import LockRound24PxsvgIcon from "./icons/PlasmicIcon__LockRound24Pxsvg"; // plasmic-import: asIZwQA4Ru/icon
import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: zPwakZQFwR6/icon
import Mail24PxsvgIcon from "./icons/PlasmicIcon__Mail24Pxsvg"; // plasmic-import: VNOzHnpaj8/icon
import IcondownIconIcon from "./icons/PlasmicIcon__IcondownIcon"; // plasmic-import: 0-rTnaDj68/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: zGfmmTFBuGj/icon
import DoubleRing14S200Px2SvgIcon from "./icons/PlasmicIcon__DoubleRing14S200Px2Svg"; // plasmic-import: aHDcF0rlr/icon

export type PlasmicAuthComponent__VariantMembers = {
  isSignUpFlow: "isSignUpFlow";
  isError: "isError";
  isLoading: "isLoading";
};

export type PlasmicAuthComponent__VariantsArgs = {
  isSignUpFlow?: SingleBooleanChoiceArg<"isSignUpFlow">;
  isError?: SingleBooleanChoiceArg<"isError">;
  isLoading?: SingleBooleanChoiceArg<"isLoading">;
};

type VariantPropType = keyof PlasmicAuthComponent__VariantsArgs;
export const PlasmicAuthComponent__VariantProps = new Array<VariantPropType>(
  "isSignUpFlow",
  "isError",
  "isLoading"
);

export type PlasmicAuthComponent__ArgsType = {
  errorMessage?: React.ReactNode;
};

type ArgPropType = keyof PlasmicAuthComponent__ArgsType;
export const PlasmicAuthComponent__ArgProps = new Array<ArgPropType>(
  "errorMessage"
);

export type PlasmicAuthComponent__OverridesType = {
  accountRegistration?: p.Flex<"div">;
  form?: p.Flex<"div">;
  boxSignInHeader?: p.Flex<"div">;
  h1?: p.Flex<"h1">;
  emailInput?: p.Flex<typeof TextInput>;
  passwordInput?: p.Flex<typeof TextInput>;
  firstNameInput2?: p.Flex<typeof TextInput>;
  lastNameInput?: p.Flex<typeof TextInput>;
  emailInput2?: p.Flex<typeof TextInput>;
  passwordInput3?: p.Flex<typeof TextInput>;
  passwordInput2?: p.Flex<typeof TextInput>;
  submitButton?: p.Flex<typeof Cd3PlButton>;
  submitButton2?: p.Flex<typeof Button>;
  verticalStack?: p.Flex<"div">;
  createAccount?: p.Flex<"div">;
};

export interface DefaultAuthComponentProps {
  errorMessage?: React.ReactNode;
  isSignUpFlow?: SingleBooleanChoiceArg<"isSignUpFlow">;
  isError?: SingleBooleanChoiceArg<"isError">;
  isLoading?: SingleBooleanChoiceArg<"isLoading">;
  className?: string;
}

function PlasmicAuthComponent__RenderFunc(props: {
  variants: PlasmicAuthComponent__VariantsArgs;
  args: PlasmicAuthComponent__ArgsType;
  overrides: PlasmicAuthComponent__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6JfnloVhzca()
  });

  return (
    true ? (
      <div
        data-plasmic-name={"accountRegistration"}
        data-plasmic-override={overrides.accountRegistration}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.accountRegistration,
          {
            [sty.accountRegistrationisSignUpFlow]: hasVariant(
              variants,
              "isSignUpFlow",
              "isSignUpFlow"
            )
          }
        )}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"form"}
          data-plasmic-override={overrides.form}
          hasGap={true}
          className={classNames(projectcss.all, sty.form, {
            [sty.formisSignUpFlow]: hasVariant(
              variants,
              "isSignUpFlow",
              "isSignUpFlow"
            )
          })}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"boxSignInHeader"}
            data-plasmic-override={overrides.boxSignInHeader}
            hasGap={true}
            className={classNames(projectcss.all, sty.boxSignInHeader, {
              [sty.boxSignInHeaderisError]: hasVariant(
                variants,
                "isError",
                "isError"
              ),
              [sty.boxSignInHeaderisSignUpFlow]: hasVariant(
                variants,
                "isSignUpFlow",
                "isSignUpFlow"
              )
            })}
          >
            <h1
              data-plasmic-name={"h1"}
              data-plasmic-override={overrides.h1}
              className={classNames(projectcss.all, projectcss.h1, sty.h1, {
                [sty.h1isError]: hasVariant(variants, "isError", "isError")
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__pkEzS,
                  {
                    [sty.textisError__pkEzSfKsvA]: hasVariant(
                      variants,
                      "isError",
                      "isError"
                    ),
                    [sty.textisLoading__pkEzSzX6Fw]: hasVariant(
                      variants,
                      "isLoading",
                      "isLoading"
                    ),
                    [sty.textisSignUpFlow__pkEzSaGhsK]: hasVariant(
                      variants,
                      "isSignUpFlow",
                      "isSignUpFlow"
                    )
                  }
                )}
              >
                {hasVariant(variants, "isLoading", "isLoading") ? (
                  <React.Fragment>
                    <React.Fragment>{""}</React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#000000" }}
                    >
                      {"Sign In"}
                    </span>
                    <React.Fragment>{""}</React.Fragment>
                  </React.Fragment>
                ) : hasVariant(variants, "isError", "isError") ? (
                  "Sign In"
                ) : hasVariant(variants, "isSignUpFlow", "isSignUpFlow") ? (
                  "Register"
                ) : (
                  "Sign In"
                )}
              </div>
            </h1>
          </p.Stack>

          {(hasVariant(variants, "isError", "isError") ? true : true) ? (
            <div
              className={classNames(projectcss.all, sty.freeBox__urkia, {
                [sty.freeBoxisError__urkiafKsvA]: hasVariant(
                  variants,
                  "isError",
                  "isError"
                )
              })}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox__psYoO, {
                  [sty.freeBoxisError__psYoOfKsvA]: hasVariant(
                    variants,
                    "isError",
                    "isError"
                  )
                })}
              >
                {p.renderPlasmicSlot({
                  defaultContents: "Error text goes here",
                  value: args.errorMessage,
                  className: classNames(sty.slotTargetErrorMessage, {
                    [sty.slotTargetErrorMessageisError]: hasVariant(
                      variants,
                      "isError",
                      "isError"
                    )
                  })
                })}
              </div>
            </div>
          ) : null}
          {(
            hasVariant(variants, "isSignUpFlow", "isSignUpFlow") ? true : true
          ) ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__enUzi, {
                [sty.freeBoxisError__enUziFKsvA]: hasVariant(
                  variants,
                  "isError",
                  "isError"
                ),
                [sty.freeBoxisLoading__enUzizX6Fw]: hasVariant(
                  variants,
                  "isLoading",
                  "isLoading"
                ),
                [sty.freeBoxisSignUpFlow__enUziaGhsK]: hasVariant(
                  variants,
                  "isSignUpFlow",
                  "isSignUpFlow"
                )
              })}
            >
              {(
                hasVariant(variants, "isSignUpFlow", "isSignUpFlow")
                  ? true
                  : true
              ) ? (
                <TextInput
                  data-plasmic-name={"emailInput"}
                  data-plasmic-override={overrides.emailInput}
                  className={classNames("__wab_instance", sty.emailInput, {
                    [sty.emailInputisError]: hasVariant(
                      variants,
                      "isError",
                      "isError"
                    ),
                    [sty.emailInputisLoading]: hasVariant(
                      variants,
                      "isLoading",
                      "isLoading"
                    ),
                    [sty.emailInputisSignUpFlow]: hasVariant(
                      variants,
                      "isSignUpFlow",
                      "isSignUpFlow"
                    )
                  })}
                  placeholder={"Enter email" as const}
                  shadowFar={true}
                  showStartIcon={true}
                  startIcon={
                    <MailRound24PxsvgIcon
                      className={classNames(projectcss.all, sty.svg__ry7Dc)}
                      role={"img"}
                    />
                  }
                  type={"Email" as const}
                />
              ) : null}
              {(
                hasVariant(variants, "isSignUpFlow", "isSignUpFlow")
                  ? true
                  : true
              ) ? (
                <TextInput
                  data-plasmic-name={"passwordInput"}
                  data-plasmic-override={overrides.passwordInput}
                  className={classNames("__wab_instance", sty.passwordInput, {
                    [sty.passwordInputisError]: hasVariant(
                      variants,
                      "isError",
                      "isError"
                    ),
                    [sty.passwordInputisSignUpFlow]: hasVariant(
                      variants,
                      "isSignUpFlow",
                      "isSignUpFlow"
                    )
                  })}
                  name={"" as const}
                  placeholder={"Enter password" as const}
                  shadowFar={true}
                  showStartIcon={true}
                  startIcon={
                    <LockRound24PxsvgIcon
                      className={classNames(projectcss.all, sty.svg__kncNi)}
                      role={"img"}
                    />
                  }
                  type={"password" as const}
                />
              ) : null}
              {(
                hasVariant(variants, "isSignUpFlow", "isSignUpFlow")
                  ? true
                  : true
              ) ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__iuLvQ, {
                    [sty.freeBoxisSignUpFlow__iuLvQaGhsK]: hasVariant(
                      variants,
                      "isSignUpFlow",
                      "isSignUpFlow"
                    )
                  })}
                >
                  {(
                    hasVariant(variants, "isSignUpFlow", "isSignUpFlow")
                      ? true
                      : false
                  ) ? (
                    <TextInput
                      data-plasmic-name={"firstNameInput2"}
                      data-plasmic-override={overrides.firstNameInput2}
                      className={classNames(
                        "__wab_instance",
                        sty.firstNameInput2,
                        {
                          [sty.firstNameInput2isSignUpFlow]: hasVariant(
                            variants,
                            "isSignUpFlow",
                            "isSignUpFlow"
                          )
                        }
                      )}
                      placeholder={"Enter first name" as const}
                      shadowFar={true}
                      type={"Text" as const}
                    />
                  ) : null}
                  {(
                    hasVariant(variants, "isSignUpFlow", "isSignUpFlow")
                      ? true
                      : false
                  ) ? (
                    <TextInput
                      data-plasmic-name={"lastNameInput"}
                      data-plasmic-override={overrides.lastNameInput}
                      className={classNames(
                        "__wab_instance",
                        sty.lastNameInput,
                        {
                          [sty.lastNameInputisSignUpFlow]: hasVariant(
                            variants,
                            "isSignUpFlow",
                            "isSignUpFlow"
                          )
                        }
                      )}
                      placeholder={"Enter last name" as const}
                      shadowFar={true}
                      type={"Text" as const}
                    />
                  ) : null}
                </p.Stack>
              ) : null}
              {(
                hasVariant(variants, "isSignUpFlow", "isSignUpFlow")
                  ? true
                  : true
              ) ? (
                <TextInput
                  data-plasmic-name={"emailInput2"}
                  data-plasmic-override={overrides.emailInput2}
                  className={classNames("__wab_instance", sty.emailInput2, {
                    [sty.emailInput2isSignUpFlow]: hasVariant(
                      variants,
                      "isSignUpFlow",
                      "isSignUpFlow"
                    )
                  })}
                  placeholder={"Enter email" as const}
                  shadowFar={true}
                  showStartIcon={true}
                  startIcon={
                    <Mail24PxsvgIcon
                      className={classNames(projectcss.all, sty.svg__jW6S4)}
                      role={"img"}
                    />
                  }
                  type={"email" as const}
                />
              ) : null}
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__ku7Rr, {
                    [sty.freeBoxisSignUpFlow__ku7RraGhsK]: hasVariant(
                      variants,
                      "isSignUpFlow",
                      "isSignUpFlow"
                    )
                  })}
                />
              ) : null}
              {(
                hasVariant(variants, "isSignUpFlow", "isSignUpFlow")
                  ? true
                  : false
              ) ? (
                <TextInput
                  data-plasmic-name={"passwordInput3"}
                  data-plasmic-override={overrides.passwordInput3}
                  aria-label={"" as const}
                  className={classNames("__wab_instance", sty.passwordInput3, {
                    [sty.passwordInput3isSignUpFlow]: hasVariant(
                      variants,
                      "isSignUpFlow",
                      "isSignUpFlow"
                    )
                  })}
                  placeholder={"Enter Password" as const}
                  shadowFar={true}
                  showStartIcon={true}
                  startIcon={
                    <LockRound24PxsvgIcon
                      className={classNames(projectcss.all, sty.svg__zTKrg)}
                      role={"img"}
                    />
                  }
                  type={"password" as const}
                />
              ) : null}
              {(
                hasVariant(variants, "isSignUpFlow", "isSignUpFlow")
                  ? true
                  : false
              ) ? (
                <TextInput
                  data-plasmic-name={"passwordInput2"}
                  data-plasmic-override={overrides.passwordInput2}
                  className={classNames("__wab_instance", sty.passwordInput2, {
                    [sty.passwordInput2isSignUpFlow]: hasVariant(
                      variants,
                      "isSignUpFlow",
                      "isSignUpFlow"
                    )
                  })}
                  placeholder={"Confirm password" as const}
                  shadowFar={true}
                  showStartIcon={true}
                  startIcon={
                    <LockRound24PxsvgIcon
                      className={classNames(projectcss.all, sty.svg__ofWzD)}
                      role={"img"}
                    />
                  }
                  type={"Password" as const}
                />
              ) : null}
              {(
                hasVariant(variants, "isSignUpFlow", "isSignUpFlow")
                  ? true
                  : true
              ) ? (
                <Cd3PlButton
                  data-plasmic-name={"submitButton"}
                  data-plasmic-override={overrides.submitButton}
                  className={classNames("__wab_instance", sty.submitButton, {
                    [sty.submitButtonisSignUpFlow]: hasVariant(
                      variants,
                      "isSignUpFlow",
                      "isSignUpFlow"
                    )
                  })}
                  shadow={"farShadow" as const}
                  type={"primary" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__pqz5L
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#FFFFFF" }}
                      >
                        {"Create account"}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  </div>
                </Cd3PlButton>
              ) : null}
              {(
                hasVariant(variants, "isLoading", "isLoading") ? true : true
              ) ? (
                <Button
                  data-plasmic-name={"submitButton2"}
                  data-plasmic-override={overrides.submitButton2}
                  className={classNames("__wab_instance", sty.submitButton2, {
                    [sty.submitButton2isError]: hasVariant(
                      variants,
                      "isError",
                      "isError"
                    ),
                    [sty.submitButton2isLoading]: hasVariant(
                      variants,
                      "isLoading",
                      "isLoading"
                    ),
                    [sty.submitButton2isSignUpFlow]: hasVariant(
                      variants,
                      "isSignUpFlow",
                      "isSignUpFlow"
                    )
                  })}
                  color={"teal" as const}
                  link={
                    hasVariant(variants, "isSignUpFlow", "isSignUpFlow")
                      ? ("/onboarding" as const)
                      : ("/" as const)
                  }
                  showStartIcon={true}
                  startIcon={
                    (
                      hasVariant(variants, "isSignUpFlow", "isSignUpFlow")
                        ? true
                        : true
                    ) ? (
                      <Icon4Icon
                        className={classNames(projectcss.all, sty.svg__yzHn, {
                          [sty.svgisSignUpFlow__yzHnaGhsK]: hasVariant(
                            variants,
                            "isSignUpFlow",
                            "isSignUpFlow"
                          )
                        })}
                        role={"img"}
                      />
                    ) : null
                  }
                >
                  {(
                    hasVariant(variants, "isSignUpFlow", "isSignUpFlow")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__pdh3J,
                        {
                          [sty.textisSignUpFlow__pdh3JaGhsK]: hasVariant(
                            variants,
                            "isSignUpFlow",
                            "isSignUpFlow"
                          )
                        }
                      )}
                    >
                      {"Submit"}
                    </div>
                  ) : null}
                </Button>
              ) : null}
              {(
                hasVariant(variants, "isLoading", "isLoading") ? true : true
              ) ? (
                <DoubleRing14S200Px2SvgIcon
                  className={classNames(projectcss.all, sty.svg__mBgXs, {
                    [sty.svgisLoading__mBgXSzX6Fw]: hasVariant(
                      variants,
                      "isLoading",
                      "isLoading"
                    )
                  })}
                  role={"img"}
                />
              ) : null}
            </p.Stack>
          ) : null}

          <div
            data-plasmic-name={"verticalStack"}
            data-plasmic-override={overrides.verticalStack}
            className={classNames(projectcss.all, sty.verticalStack, {
              [sty.verticalStackisSignUpFlow]: hasVariant(
                variants,
                "isSignUpFlow",
                "isSignUpFlow"
              )
            })}
          >
            <div
              data-plasmic-name={"createAccount"}
              data-plasmic-override={overrides.createAccount}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.createAccount,
                {
                  [sty.createAccountisError]: hasVariant(
                    variants,
                    "isError",
                    "isError"
                  ),
                  [sty.createAccountisSignUpFlow]: hasVariant(
                    variants,
                    "isSignUpFlow",
                    "isSignUpFlow"
                  )
                }
              )}
            >
              {hasVariant(variants, "isSignUpFlow", "isSignUpFlow")
                ? "Already have an account?"
                : "Don’t have an account?"}
            </div>

            <Button
              className={classNames("__wab_instance", sty.button__tLad, {
                [sty.buttonisSignUpFlow__tLadAGhsK]: hasVariant(
                  variants,
                  "isSignUpFlow",
                  "isSignUpFlow"
                )
              })}
              color={"link" as const}
              link={
                hasVariant(variants, "isSignUpFlow", "isSignUpFlow")
                  ? ("/login" as const)
                  : ("/signup" as const)
              }
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__rtYpf,
                  {
                    [sty.textisSignUpFlow__rtYpfaGhsK]: hasVariant(
                      variants,
                      "isSignUpFlow",
                      "isSignUpFlow"
                    )
                  }
                )}
              >
                {hasVariant(variants, "isSignUpFlow", "isSignUpFlow")
                  ? "Log In"
                  : "Create one here"}
              </div>
            </Button>

            {(
              hasVariant(variants, "isSignUpFlow", "isSignUpFlow") ? true : true
            ) ? (
              <button
                className={classNames(
                  projectcss.all,
                  projectcss.button,
                  projectcss.__wab_text,
                  sty.button__rdYcj,
                  {
                    [sty.buttonisError__rdYcjfKsvA]: hasVariant(
                      variants,
                      "isError",
                      "isError"
                    ),
                    [sty.buttonisSignUpFlow__rdYcJaGhsK]: hasVariant(
                      variants,
                      "isSignUpFlow",
                      "isSignUpFlow"
                    )
                  }
                )}
              >
                {hasVariant(globalVariants, "screen", "mobile")
                  ? "Forgot Password"
                  : "Forgot Password"}
              </button>
            ) : null}
          </div>
        </p.Stack>
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  accountRegistration: [
    "accountRegistration",
    "form",
    "boxSignInHeader",
    "h1",
    "emailInput",
    "passwordInput",
    "firstNameInput2",
    "lastNameInput",
    "emailInput2",
    "passwordInput3",
    "passwordInput2",
    "submitButton",
    "submitButton2",
    "verticalStack",
    "createAccount"
  ],
  form: [
    "form",
    "boxSignInHeader",
    "h1",
    "emailInput",
    "passwordInput",
    "firstNameInput2",
    "lastNameInput",
    "emailInput2",
    "passwordInput3",
    "passwordInput2",
    "submitButton",
    "submitButton2",
    "verticalStack",
    "createAccount"
  ],
  boxSignInHeader: ["boxSignInHeader", "h1"],
  h1: ["h1"],
  emailInput: ["emailInput"],
  passwordInput: ["passwordInput"],
  firstNameInput2: ["firstNameInput2"],
  lastNameInput: ["lastNameInput"],
  emailInput2: ["emailInput2"],
  passwordInput3: ["passwordInput3"],
  passwordInput2: ["passwordInput2"],
  submitButton: ["submitButton"],
  submitButton2: ["submitButton2"],
  verticalStack: ["verticalStack", "createAccount"],
  createAccount: ["createAccount"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  accountRegistration: "div";
  form: "div";
  boxSignInHeader: "div";
  h1: "h1";
  emailInput: typeof TextInput;
  passwordInput: typeof TextInput;
  firstNameInput2: typeof TextInput;
  lastNameInput: typeof TextInput;
  emailInput2: typeof TextInput;
  passwordInput3: typeof TextInput;
  passwordInput2: typeof TextInput;
  submitButton: typeof Cd3PlButton;
  submitButton2: typeof Button;
  verticalStack: "div";
  createAccount: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAuthComponent__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAuthComponent__VariantsArgs;
    args?: PlasmicAuthComponent__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAuthComponent__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAuthComponent__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicAuthComponent__ArgProps,
      internalVariantPropNames: PlasmicAuthComponent__VariantProps
    });

    return PlasmicAuthComponent__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "accountRegistration") {
    func.displayName = "PlasmicAuthComponent";
  } else {
    func.displayName = `PlasmicAuthComponent.${nodeName}`;
  }
  return func;
}

export const PlasmicAuthComponent = Object.assign(
  // Top-level PlasmicAuthComponent renders the root element
  makeNodeComponent("accountRegistration"),
  {
    // Helper components rendering sub-elements
    form: makeNodeComponent("form"),
    boxSignInHeader: makeNodeComponent("boxSignInHeader"),
    h1: makeNodeComponent("h1"),
    emailInput: makeNodeComponent("emailInput"),
    passwordInput: makeNodeComponent("passwordInput"),
    firstNameInput2: makeNodeComponent("firstNameInput2"),
    lastNameInput: makeNodeComponent("lastNameInput"),
    emailInput2: makeNodeComponent("emailInput2"),
    passwordInput3: makeNodeComponent("passwordInput3"),
    passwordInput2: makeNodeComponent("passwordInput2"),
    submitButton: makeNodeComponent("submitButton"),
    submitButton2: makeNodeComponent("submitButton2"),
    verticalStack: makeNodeComponent("verticalStack"),
    createAccount: makeNodeComponent("createAccount"),

    // Metadata about props expected for PlasmicAuthComponent
    internalVariantProps: PlasmicAuthComponent__VariantProps,
    internalArgProps: PlasmicAuthComponent__ArgProps
  }
);

export default PlasmicAuthComponent;
/* prettier-ignore-end */
