// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: n7PMUCBoe1fA7rXcBRi5FH
// Component: gg3SzItfYc
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { SupabaseField } from "../../CodeComponents/DisplayCollections"; // plasmic-import: M-kXdn19ZI/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_club_debut_3_pl_app.module.css"; // plasmic-import: n7PMUCBoe1fA7rXcBRi5FH/projectcss
import sty from "./PlasmicOrderCell.module.css"; // plasmic-import: gg3SzItfYc/css

import AppIcons2Icon from "./icons/PlasmicIcon__AppIcons2"; // plasmic-import: O8LjEO2Edap/icon
import Property1ProcessingCirclesvgIcon from "./icons/PlasmicIcon__Property1ProcessingCirclesvg"; // plasmic-import: v4NLsLx-n/icon

export type PlasmicOrderCell__VariantMembers = {};

export type PlasmicOrderCell__VariantsArgs = {};
type VariantPropType = keyof PlasmicOrderCell__VariantsArgs;
export const PlasmicOrderCell__VariantProps = new Array<VariantPropType>();

export type PlasmicOrderCell__ArgsType = {
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
};

type ArgPropType = keyof PlasmicOrderCell__ArgsType;
export const PlasmicOrderCell__ArgProps = new Array<ArgPropType>(
  "slot",
  "slot2"
);

export type PlasmicOrderCell__OverridesType = {
  container?: p.Flex<"div">;
  avatar?: p.Flex<"div">;
  imageUrl?: p.Flex<typeof SupabaseField>;
  freeBox?: p.Flex<"div">;
};

export interface DefaultOrderCellProps {
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  className?: string;
}

function PlasmicOrderCell__RenderFunc(props: {
  variants: PlasmicOrderCell__VariantsArgs;
  args: PlasmicOrderCell__ArgsType;
  overrides: PlasmicOrderCell__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"container"}
      data-plasmic-override={overrides.container}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.container
      )}
    >
      {true ? (
        <div
          data-plasmic-name={"avatar"}
          data-plasmic-override={overrides.avatar}
          className={classNames(projectcss.all, sty.avatar)}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__yaxlo)}
                displayHeight={"24px" as const}
                displayMaxHeight={"24px" as const}
                displayMaxWidth={"24px" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"24px" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/club_debut_3_pl_app/images/ramiroPowelljpeg.jpeg",
                  fullWidth: 3569,
                  fullHeight: 5354,
                  aspectRatio: undefined
                }}
              />
            ),

            value: args.slot
          })}

          {true ? (
            <SupabaseField
              data-plasmic-name={"imageUrl"}
              data-plasmic-override={overrides.imageUrl}
              className={classNames("__wab_instance", sty.imageUrl)}
              selector={"{{row.imageUrl}}" as const}
              type={"text" as const}
            />
          ) : null}
        </div>
      ) : null}
      {true ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox)}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <React.Fragment>
                <div className={classNames(projectcss.all, sty.freeBox__kAvwv)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__u8Zca
                    )}
                  >
                    {"Belinda Hobbs"}
                  </div>

                  <SupabaseField
                    className={classNames(
                      "__wab_instance",
                      sty.supabaseField__pT1Y3
                    )}
                    selector={"{{row.customer_name}}" as const}
                    type={"text" as const}
                  />
                </div>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__nYlNq)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__j3MBa
                    )}
                  >
                    {"Payment"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hsJiy
                    )}
                  >
                    {"$120"}
                  </div>

                  <SupabaseField
                    className={classNames(
                      "__wab_instance",
                      sty.supabaseField__sMoaI
                    )}
                    selector={"{{row.total_payment}}" as const}
                    type={"text" as const}
                  />
                </p.Stack>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__t1TOn)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___8VKc1)}
                  >
                    <AppIcons2Icon
                      className={classNames(projectcss.all, sty.svg__yfPUt)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__to2Ko
                      )}
                    >
                      {"300 items"}
                    </div>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___3ZfH)}
                  >
                    <Property1ProcessingCirclesvgIcon
                      className={classNames(projectcss.all, sty.svg__mfgbw)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___2AV4O
                      )}
                    >
                      {"Processing"}
                    </div>
                  </p.Stack>

                  <SupabaseField
                    className={classNames(
                      "__wab_instance",
                      sty.supabaseField__oiXxR
                    )}
                    selector={"{{row.total_payment}}" as const}
                    type={"text" as const}
                  />
                </p.Stack>
              </React.Fragment>
            ),
            value: args.slot2
          })}
        </p.Stack>
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  container: ["container", "avatar", "imageUrl", "freeBox"],
  avatar: ["avatar", "imageUrl"],
  imageUrl: ["imageUrl"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  container: "div";
  avatar: "div";
  imageUrl: typeof SupabaseField;
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicOrderCell__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicOrderCell__VariantsArgs;
    args?: PlasmicOrderCell__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicOrderCell__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicOrderCell__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicOrderCell__ArgProps,
      internalVariantPropNames: PlasmicOrderCell__VariantProps
    });

    return PlasmicOrderCell__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "container") {
    func.displayName = "PlasmicOrderCell";
  } else {
    func.displayName = `PlasmicOrderCell.${nodeName}`;
  }
  return func;
}

export const PlasmicOrderCell = Object.assign(
  // Top-level PlasmicOrderCell renders the root element
  makeNodeComponent("container"),
  {
    // Helper components rendering sub-elements
    avatar: makeNodeComponent("avatar"),
    imageUrl: makeNodeComponent("imageUrl"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicOrderCell
    internalVariantProps: PlasmicOrderCell__VariantProps,
    internalArgProps: PlasmicOrderCell__ArgProps
  }
);

export default PlasmicOrderCell;
/* prettier-ignore-end */
