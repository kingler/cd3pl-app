// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: n7PMUCBoe1fA7rXcBRi5FH
// Component: gg3SzItfYc
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_club_debut_3_pl_app.module.css"; // plasmic-import: n7PMUCBoe1fA7rXcBRi5FH/projectcss
import sty from "./PlasmicOrderCell.module.css"; // plasmic-import: gg3SzItfYc/css

import AppIcons2Icon from "./icons/PlasmicIcon__AppIcons2"; // plasmic-import: O8LjEO2Edap/icon
import Property1ProcessingCirclesvgIcon from "./icons/PlasmicIcon__Property1ProcessingCirclesvg"; // plasmic-import: v4NLsLx-n/icon

export type PlasmicOrderCell__VariantMembers = {};

export type PlasmicOrderCell__VariantsArgs = {};
type VariantPropType = keyof PlasmicOrderCell__VariantsArgs;
export const PlasmicOrderCell__VariantProps = new Array<VariantPropType>();

export type PlasmicOrderCell__ArgsType = {};
type ArgPropType = keyof PlasmicOrderCell__ArgsType;
export const PlasmicOrderCell__ArgProps = new Array<ArgPropType>();

export type PlasmicOrderCell__OverridesType = {
  container?: p.Flex<"div">;
  avatar?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  customerName2?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
  text?: p.Flex<"div">;
  dottedCircleIcon?: p.Flex<"svg">;
  totalPayment3?: p.Flex<"div">;
};

export interface DefaultOrderCellProps {
  className?: string;
}

function PlasmicOrderCell__RenderFunc(props: {
  variants: PlasmicOrderCell__VariantsArgs;
  args: PlasmicOrderCell__ArgsType;
  overrides: PlasmicOrderCell__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"container"}
      data-plasmic-override={overrides.container}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.container
      )}
    >
      {true ? (
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__toJwj)}
        >
          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__v5Xc)}
            >
              {true ? (
                <div
                  data-plasmic-name={"avatar"}
                  data-plasmic-override={overrides.avatar}
                  className={classNames(projectcss.all, sty.avatar)}
                >
                  <p.PlasmicImg
                    data-plasmic-name={"img"}
                    data-plasmic-override={overrides.img}
                    alt={""}
                    className={classNames(sty.img)}
                    displayHeight={"24px" as const}
                    displayMaxHeight={"24px" as const}
                    displayMaxWidth={"24px" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"24px" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/club_debut_3_pl_app/images/ramiroPowelljpeg.jpeg",
                      fullWidth: 3569,
                      fullHeight: 5354,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              ) : null}

              <div className={classNames(projectcss.all, sty.freeBox__kAvwv)}>
                <div
                  data-plasmic-name={"customerName2"}
                  data-plasmic-override={overrides.customerName2}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.customerName2
                  )}
                >
                  {"Belinda Hobbs"}
                </div>
              </div>
            </p.Stack>
          ) : null}

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__t1TOn)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___8VKc1)}
            >
              <AppIcons2Icon
                data-plasmic-name={"svg"}
                data-plasmic-override={overrides.svg}
                className={classNames(projectcss.all, sty.svg)}
                role={"img"}
              />

              <div
                data-plasmic-name={"text"}
                data-plasmic-override={overrides.text}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text
                )}
              >
                {"1 items"}
              </div>
            </p.Stack>

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___3ZfH)}
            >
              <Property1ProcessingCirclesvgIcon
                data-plasmic-name={"dottedCircleIcon"}
                data-plasmic-override={overrides.dottedCircleIcon}
                className={classNames(projectcss.all, sty.dottedCircleIcon)}
                role={"img"}
              />

              <div
                data-plasmic-name={"totalPayment3"}
                data-plasmic-override={overrides.totalPayment3}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.totalPayment3
                )}
              >
                {"Processing"}
              </div>
            </p.Stack>
          </p.Stack>
        </p.Stack>
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  container: [
    "container",
    "avatar",
    "img",
    "customerName2",
    "svg",
    "text",
    "dottedCircleIcon",
    "totalPayment3"
  ],
  avatar: ["avatar", "img"],
  img: ["img"],
  customerName2: ["customerName2"],
  svg: ["svg"],
  text: ["text"],
  dottedCircleIcon: ["dottedCircleIcon"],
  totalPayment3: ["totalPayment3"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  container: "div";
  avatar: "div";
  img: typeof p.PlasmicImg;
  customerName2: "div";
  svg: "svg";
  text: "div";
  dottedCircleIcon: "svg";
  totalPayment3: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicOrderCell__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicOrderCell__VariantsArgs;
    args?: PlasmicOrderCell__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicOrderCell__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicOrderCell__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicOrderCell__ArgProps,
      internalVariantPropNames: PlasmicOrderCell__VariantProps
    });

    return PlasmicOrderCell__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "container") {
    func.displayName = "PlasmicOrderCell";
  } else {
    func.displayName = `PlasmicOrderCell.${nodeName}`;
  }
  return func;
}

export const PlasmicOrderCell = Object.assign(
  // Top-level PlasmicOrderCell renders the root element
  makeNodeComponent("container"),
  {
    // Helper components rendering sub-elements
    avatar: makeNodeComponent("avatar"),
    img: makeNodeComponent("img"),
    customerName2: makeNodeComponent("customerName2"),
    svg: makeNodeComponent("svg"),
    text: makeNodeComponent("text"),
    dottedCircleIcon: makeNodeComponent("dottedCircleIcon"),
    totalPayment3: makeNodeComponent("totalPayment3"),

    // Metadata about props expected for PlasmicOrderCell
    internalVariantProps: PlasmicOrderCell__VariantProps,
    internalArgProps: PlasmicOrderCell__ArgProps
  }
);

export default PlasmicOrderCell;
/* prettier-ignore-end */
