// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: n7PMUCBoe1fA7rXcBRi5FH
// Component: V8KmQ7KGSy
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import StatWidgetCardTop from "../../StatWidgetCardTop"; // plasmic-import: tLe-NrqXMX/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_club_debut_3_pl_app.module.css"; // plasmic-import: n7PMUCBoe1fA7rXcBRi5FH/projectcss
import sty from "./PlasmicStatsCardBasic.module.css"; // plasmic-import: V8KmQ7KGSy/css

import LineIcon from "./icons/PlasmicIcon__Line"; // plasmic-import: aQ7cQkdB4R/icon

export type PlasmicStatsCardBasic__VariantMembers = {
  largeWidget: "largeWidget";
};

export type PlasmicStatsCardBasic__VariantsArgs = {
  largeWidget?: SingleBooleanChoiceArg<"largeWidget">;
};

type VariantPropType = keyof PlasmicStatsCardBasic__VariantsArgs;
export const PlasmicStatsCardBasic__VariantProps = new Array<VariantPropType>(
  "largeWidget"
);

export type PlasmicStatsCardBasic__ArgsType = {
  slot?: React.ReactNode;
  totalRevenue?: React.ReactNode;
  label?: React.ReactNode;
};

type ArgPropType = keyof PlasmicStatsCardBasic__ArgsType;
export const PlasmicStatsCardBasic__ArgProps = new Array<ArgPropType>(
  "slot",
  "totalRevenue",
  "label"
);

export type PlasmicStatsCardBasic__OverridesType = {
  orderStatisticCard?: p.Flex<"div">;
  statWidgetCardTop?: p.Flex<typeof StatWidgetCardTop>;
  totalOrders?: p.Flex<"h2">;
  svg?: p.Flex<"svg">;
  freeBox?: p.Flex<"div">;
  container?: p.Flex<"div">;
  totalRevenue?: p.Flex<"h3">;
};

export interface DefaultStatsCardBasicProps {
  slot?: React.ReactNode;
  totalRevenue?: React.ReactNode;
  label?: React.ReactNode;
  largeWidget?: SingleBooleanChoiceArg<"largeWidget">;
  className?: string;
}

function PlasmicStatsCardBasic__RenderFunc(props: {
  variants: PlasmicStatsCardBasic__VariantsArgs;
  args: PlasmicStatsCardBasic__ArgsType;
  overrides: PlasmicStatsCardBasic__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  return (
    <div
      data-plasmic-name={"orderStatisticCard"}
      data-plasmic-override={overrides.orderStatisticCard}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.orderStatisticCard,
        {
          [sty.orderStatisticCardlargeWidget]: hasVariant(
            variants,
            "largeWidget",
            "largeWidget"
          )
        }
      )}
    >
      <StatWidgetCardTop
        data-plasmic-name={"statWidgetCardTop"}
        data-plasmic-override={overrides.statWidgetCardTop}
        className={classNames("__wab_instance", sty.statWidgetCardTop)}
      >
        {"All Orders"}
      </StatWidgetCardTop>

      {(hasVariant(variants, "largeWidget", "largeWidget") ? true : true) ? (
        <h2
          data-plasmic-name={"totalOrders"}
          data-plasmic-override={overrides.totalOrders}
          className={classNames(
            projectcss.all,
            projectcss.h2,
            sty.totalOrders,
            {
              [sty.totalOrderslargeWidget]: hasVariant(
                variants,
                "largeWidget",
                "largeWidget"
              )
            }
          )}
        >
          {true
            ? p.renderPlasmicSlot({
                defaultContents: "122,472",
                value: args.slot,
                className: classNames(sty.slotTargetSlot)
              })
            : null}
        </h2>
      ) : null}

      <LineIcon
        data-plasmic-name={"svg"}
        data-plasmic-override={overrides.svg}
        className={classNames(projectcss.all, sty.svg)}
        role={"img"}
      />

      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        {p.renderPlasmicSlot({
          defaultContents: "$1.8 mil",
          value: args.totalRevenue,
          className: classNames(sty.slotTargetTotalRevenue, {
            [sty.slotTargetTotalRevenuelargeWidget]: hasVariant(
              variants,
              "largeWidget",
              "largeWidget"
            )
          })
        })}
      </div>

      <div
        data-plasmic-name={"container"}
        data-plasmic-override={overrides.container}
        className={classNames(projectcss.all, sty.container)}
      >
        <h3
          data-plasmic-name={"totalRevenue"}
          data-plasmic-override={overrides.totalRevenue}
          className={classNames(
            projectcss.all,
            projectcss.h3,
            sty.totalRevenue
          )}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Total Revenue",
            value: args.label,
            className: classNames(sty.slotTargetLabel)
          })}
        </h3>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  orderStatisticCard: [
    "orderStatisticCard",
    "statWidgetCardTop",
    "totalOrders",
    "svg",
    "freeBox",
    "container",
    "totalRevenue"
  ],
  statWidgetCardTop: ["statWidgetCardTop"],
  totalOrders: ["totalOrders"],
  svg: ["svg"],
  freeBox: ["freeBox"],
  container: ["container", "totalRevenue"],
  totalRevenue: ["totalRevenue"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  orderStatisticCard: "div";
  statWidgetCardTop: typeof StatWidgetCardTop;
  totalOrders: "h2";
  svg: "svg";
  freeBox: "div";
  container: "div";
  totalRevenue: "h3";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicStatsCardBasic__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicStatsCardBasic__VariantsArgs;
    args?: PlasmicStatsCardBasic__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicStatsCardBasic__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicStatsCardBasic__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicStatsCardBasic__ArgProps,
      internalVariantPropNames: PlasmicStatsCardBasic__VariantProps
    });

    return PlasmicStatsCardBasic__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "orderStatisticCard") {
    func.displayName = "PlasmicStatsCardBasic";
  } else {
    func.displayName = `PlasmicStatsCardBasic.${nodeName}`;
  }
  return func;
}

export const PlasmicStatsCardBasic = Object.assign(
  // Top-level PlasmicStatsCardBasic renders the root element
  makeNodeComponent("orderStatisticCard"),
  {
    // Helper components rendering sub-elements
    statWidgetCardTop: makeNodeComponent("statWidgetCardTop"),
    totalOrders: makeNodeComponent("totalOrders"),
    svg: makeNodeComponent("svg"),
    freeBox: makeNodeComponent("freeBox"),
    container: makeNodeComponent("container"),
    totalRevenue: makeNodeComponent("totalRevenue"),

    // Metadata about props expected for PlasmicStatsCardBasic
    internalVariantProps: PlasmicStatsCardBasic__VariantProps,
    internalArgProps: PlasmicStatsCardBasic__ArgProps
  }
);

export default PlasmicStatsCardBasic;
/* prettier-ignore-end */
