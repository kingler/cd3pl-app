// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: n7PMUCBoe1fA7rXcBRi5FH
// Component: orBaiNbMMn
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import AuthComponent from "../../AuthComponent"; // plasmic-import: nY2U_rP0qI/component
import LogoComponent from "../../LogoComponent"; // plasmic-import: cwOpUPrWbw/component

import { useScreenVariants as useScreenVariants_6JfnloVhzca } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 6JfnloVhzca/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_club_debut_3_pl_app.module.css"; // plasmic-import: n7PMUCBoe1fA7rXcBRi5FH/projectcss
import sty from "./PlasmicLogin.module.css"; // plasmic-import: orBaiNbMMn/css

export type PlasmicLogin__VariantMembers = {};

export type PlasmicLogin__VariantsArgs = {};
type VariantPropType = keyof PlasmicLogin__VariantsArgs;
export const PlasmicLogin__VariantProps = new Array<VariantPropType>();

export type PlasmicLogin__ArgsType = {};
type ArgPropType = keyof PlasmicLogin__ArgsType;
export const PlasmicLogin__ArgProps = new Array<ArgPropType>();

export type PlasmicLogin__OverridesType = {
  loginPage?: p.Flex<"div">;
  login?: p.Flex<"div">;
  signIn?: p.Flex<"div">;
  authComponent?: p.Flex<typeof AuthComponent>;
  horizontalStack?: p.Flex<"div">;
  logo?: p.Flex<"div">;
  logoComponent?: p.Flex<typeof LogoComponent>;
  text?: p.Flex<"div">;
};

export interface DefaultLoginProps {}

function PlasmicLogin__RenderFunc(props: {
  variants: PlasmicLogin__VariantsArgs;
  args: PlasmicLogin__ArgsType;
  overrides: PlasmicLogin__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6JfnloVhzca()
  });

  return (
    <React.Fragment>
      {}

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"loginPage"}
          data-plasmic-override={overrides.loginPage}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.loginPage
          )}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"login"}
            data-plasmic-override={overrides.login}
            hasGap={true}
            className={classNames(projectcss.all, sty.login)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"signIn"}
              data-plasmic-override={overrides.signIn}
              hasGap={true}
              className={classNames(projectcss.all, sty.signIn)}
            >
              <AuthComponent
                data-plasmic-name={"authComponent"}
                data-plasmic-override={overrides.authComponent}
                className={classNames("__wab_instance", sty.authComponent)}
              />
            </p.Stack>

            <p.Stack
              as={"div"}
              data-plasmic-name={"horizontalStack"}
              data-plasmic-override={overrides.horizontalStack}
              hasGap={true}
              className={classNames(projectcss.all, sty.horizontalStack)}
            >
              <div
                data-plasmic-name={"logo"}
                data-plasmic-override={overrides.logo}
                className={classNames(projectcss.all, sty.logo)}
              >
                <LogoComponent
                  data-plasmic-name={"logoComponent"}
                  data-plasmic-override={overrides.logoComponent}
                  className={classNames("__wab_instance", sty.logoComponent)}
                  color={"light" as const}
                />

                <div
                  data-plasmic-name={"text"}
                  data-plasmic-override={overrides.text}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobile")
                    ? "Logistics and production for fashion brands & creative professionals"
                    : "Logistics and production for fashion brands & creative professionals"}
                </div>
              </div>
            </p.Stack>
          </p.Stack>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  loginPage: [
    "loginPage",
    "login",
    "signIn",
    "authComponent",
    "horizontalStack",
    "logo",
    "logoComponent",
    "text"
  ],
  login: [
    "login",
    "signIn",
    "authComponent",
    "horizontalStack",
    "logo",
    "logoComponent",
    "text"
  ],
  signIn: ["signIn", "authComponent"],
  authComponent: ["authComponent"],
  horizontalStack: ["horizontalStack", "logo", "logoComponent", "text"],
  logo: ["logo", "logoComponent", "text"],
  logoComponent: ["logoComponent"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  loginPage: "div";
  login: "div";
  signIn: "div";
  authComponent: typeof AuthComponent;
  horizontalStack: "div";
  logo: "div";
  logoComponent: typeof LogoComponent;
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLogin__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLogin__VariantsArgs;
    args?: PlasmicLogin__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLogin__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLogin__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicLogin__ArgProps,
      internalVariantPropNames: PlasmicLogin__VariantProps
    });

    return PlasmicLogin__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "loginPage") {
    func.displayName = "PlasmicLogin";
  } else {
    func.displayName = `PlasmicLogin.${nodeName}`;
  }
  return func;
}

export const PlasmicLogin = Object.assign(
  // Top-level PlasmicLogin renders the root element
  makeNodeComponent("loginPage"),
  {
    // Helper components rendering sub-elements
    login: makeNodeComponent("login"),
    signIn: makeNodeComponent("signIn"),
    authComponent: makeNodeComponent("authComponent"),
    horizontalStack: makeNodeComponent("horizontalStack"),
    logo: makeNodeComponent("logo"),
    logoComponent: makeNodeComponent("logoComponent"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicLogin
    internalVariantProps: PlasmicLogin__VariantProps,
    internalArgProps: PlasmicLogin__ArgProps
  }
);

export default PlasmicLogin;
/* prettier-ignore-end */
