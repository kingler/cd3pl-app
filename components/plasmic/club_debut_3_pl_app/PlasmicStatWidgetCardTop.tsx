// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: n7PMUCBoe1fA7rXcBRi5FH
// Component: tLe-NrqXMX
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import StatWidgetControls from "../../StatWidgetControls"; // plasmic-import: HLNvZebaAJ/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_club_debut_3_pl_app.module.css"; // plasmic-import: n7PMUCBoe1fA7rXcBRi5FH/projectcss
import sty from "./PlasmicStatWidgetCardTop.module.css"; // plasmic-import: tLe-NrqXMX/css

export type PlasmicStatWidgetCardTop__VariantMembers = {};

export type PlasmicStatWidgetCardTop__VariantsArgs = {};
type VariantPropType = keyof PlasmicStatWidgetCardTop__VariantsArgs;
export const PlasmicStatWidgetCardTop__VariantProps =
  new Array<VariantPropType>();

export type PlasmicStatWidgetCardTop__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicStatWidgetCardTop__ArgsType;
export const PlasmicStatWidgetCardTop__ArgProps = new Array<ArgPropType>(
  "children"
);

export type PlasmicStatWidgetCardTop__OverridesType = {
  controler?: p.Flex<"div">;
  container?: p.Flex<"div">;
  title?: p.Flex<"div">;
  statWidgetControls?: p.Flex<typeof StatWidgetControls>;
};

export interface DefaultStatWidgetCardTopProps {
  children?: React.ReactNode;
  className?: string;
}

function PlasmicStatWidgetCardTop__RenderFunc(props: {
  variants: PlasmicStatWidgetCardTop__VariantsArgs;
  args: PlasmicStatWidgetCardTop__ArgsType;
  overrides: PlasmicStatWidgetCardTop__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  return (
    true ? (
      <div
        data-plasmic-name={"controler"}
        data-plasmic-override={overrides.controler}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.controler
        )}
      >
        {true ? (
          <div
            data-plasmic-name={"container"}
            data-plasmic-override={overrides.container}
            className={classNames(projectcss.all, sty.container)}
          >
            <div
              data-plasmic-name={"title"}
              data-plasmic-override={overrides.title}
              className={classNames(projectcss.all, sty.title)}
            >
              {p.renderPlasmicSlot({
                defaultContents: "Orders by Channel",
                value: args.children,
                className: classNames(sty.slotTargetChildren)
              })}
            </div>
          </div>
        ) : null}

        <StatWidgetControls
          data-plasmic-name={"statWidgetControls"}
          data-plasmic-override={overrides.statWidgetControls}
          className={classNames("__wab_instance", sty.statWidgetControls)}
        />
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  controler: ["controler", "container", "title", "statWidgetControls"],
  container: ["container", "title"],
  title: ["title"],
  statWidgetControls: ["statWidgetControls"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  controler: "div";
  container: "div";
  title: "div";
  statWidgetControls: typeof StatWidgetControls;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicStatWidgetCardTop__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicStatWidgetCardTop__VariantsArgs;
    args?: PlasmicStatWidgetCardTop__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicStatWidgetCardTop__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicStatWidgetCardTop__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicStatWidgetCardTop__ArgProps,
      internalVariantPropNames: PlasmicStatWidgetCardTop__VariantProps
    });

    return PlasmicStatWidgetCardTop__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "controler") {
    func.displayName = "PlasmicStatWidgetCardTop";
  } else {
    func.displayName = `PlasmicStatWidgetCardTop.${nodeName}`;
  }
  return func;
}

export const PlasmicStatWidgetCardTop = Object.assign(
  // Top-level PlasmicStatWidgetCardTop renders the root element
  makeNodeComponent("controler"),
  {
    // Helper components rendering sub-elements
    container: makeNodeComponent("container"),
    title: makeNodeComponent("title"),
    statWidgetControls: makeNodeComponent("statWidgetControls"),

    // Metadata about props expected for PlasmicStatWidgetCardTop
    internalVariantProps: PlasmicStatWidgetCardTop__VariantProps,
    internalArgProps: PlasmicStatWidgetCardTop__ArgProps
  }
);

export default PlasmicStatWidgetCardTop;
/* prettier-ignore-end */
