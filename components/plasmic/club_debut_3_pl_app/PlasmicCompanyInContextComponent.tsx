// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: n7PMUCBoe1fA7rXcBRi5FH
// Component: FBG1EzcxxU
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Select from "../../Select"; // plasmic-import: DitIOB-YbI8/component
import Select__Option from "../../Select__Option"; // plasmic-import: S75avsPWPCJ/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_club_debut_3_pl_app.module.css"; // plasmic-import: n7PMUCBoe1fA7rXcBRi5FH/projectcss
import sty from "./PlasmicCompanyInContextComponent.module.css"; // plasmic-import: FBG1EzcxxU/css

import MaskIcon from "./icons/PlasmicIcon__Mask"; // plasmic-import: 6QvyLoSIFTo/icon

export type PlasmicCompanyInContextComponent__VariantMembers = {
  isExpandedViewMenu: "isExpandedViewMenu";
  isCollapsedHideMenu: "isCollapsedHideMenu";
  isCollapsedViewMenu: "isCollapsedViewMenu";
};

export type PlasmicCompanyInContextComponent__VariantsArgs = {
  isExpandedViewMenu?: SingleBooleanChoiceArg<"isExpandedViewMenu">;
  isCollapsedHideMenu?: SingleBooleanChoiceArg<"isCollapsedHideMenu">;
  isCollapsedViewMenu?: SingleBooleanChoiceArg<"isCollapsedViewMenu">;
};

type VariantPropType = keyof PlasmicCompanyInContextComponent__VariantsArgs;
export const PlasmicCompanyInContextComponent__VariantProps =
  new Array<VariantPropType>(
    "isExpandedViewMenu",
    "isCollapsedHideMenu",
    "isCollapsedViewMenu"
  );

export type PlasmicCompanyInContextComponent__ArgsType = {};
type ArgPropType = keyof PlasmicCompanyInContextComponent__ArgsType;
export const PlasmicCompanyInContextComponent__ArgProps =
  new Array<ArgPropType>();

export type PlasmicCompanyInContextComponent__OverridesType = {
  accountInContext?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  select?: p.Flex<typeof Select>;
  text?: p.Flex<"div">;
};

export interface DefaultCompanyInContextComponentProps {
  isExpandedViewMenu?: SingleBooleanChoiceArg<"isExpandedViewMenu">;
  isCollapsedHideMenu?: SingleBooleanChoiceArg<"isCollapsedHideMenu">;
  isCollapsedViewMenu?: SingleBooleanChoiceArg<"isCollapsedViewMenu">;
  className?: string;
}

function PlasmicCompanyInContextComponent__RenderFunc(props: {
  variants: PlasmicCompanyInContextComponent__VariantsArgs;
  args: PlasmicCompanyInContextComponent__ArgsType;
  overrides: PlasmicCompanyInContextComponent__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  return (
    true ? (
      <p.Stack
        as={"div"}
        data-plasmic-name={"accountInContext"}
        data-plasmic-override={overrides.accountInContext}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        hasGap={true}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.accountInContext,
          {
            [sty.accountInContextisCollapsedHideMenu]: hasVariant(
              variants,
              "isCollapsedHideMenu",
              "isCollapsedHideMenu"
            ),
            [sty.accountInContextisCollapsedViewMenu]: hasVariant(
              variants,
              "isCollapsedViewMenu",
              "isCollapsedViewMenu"
            ),
            [sty.accountInContextisExpandedViewMenu]: hasVariant(
              variants,
              "isExpandedViewMenu",
              "isExpandedViewMenu"
            )
          }
        )}
      >
        {true ? (
          <p.Stack
            as={"div"}
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox, {
              [sty.freeBoxisCollapsedHideMenu]: hasVariant(
                variants,
                "isCollapsedHideMenu",
                "isCollapsedHideMenu"
              ),
              [sty.freeBoxisCollapsedViewMenu]: hasVariant(
                variants,
                "isCollapsedViewMenu",
                "isCollapsedViewMenu"
              ),
              [sty.freeBoxisExpandedViewMenu]: hasVariant(
                variants,
                "isExpandedViewMenu",
                "isExpandedViewMenu"
              )
            })}
          >
            <Select
              data-plasmic-name={"select"}
              data-plasmic-override={overrides.select}
              className={classNames("__wab_instance", sty.select)}
              placeholder={
                <div
                  data-plasmic-name={"text"}
                  data-plasmic-override={overrides.text}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text
                  )}
                >
                  {"Basics Fashion"}
                </div>
              }
            />
          </p.Stack>
        ) : null}
      </p.Stack>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  accountInContext: ["accountInContext", "freeBox", "select", "text"],
  freeBox: ["freeBox", "select", "text"],
  select: ["select", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  accountInContext: "div";
  freeBox: "div";
  select: typeof Select;
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCompanyInContextComponent__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCompanyInContextComponent__VariantsArgs;
    args?: PlasmicCompanyInContextComponent__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCompanyInContextComponent__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCompanyInContextComponent__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCompanyInContextComponent__ArgProps,
      internalVariantPropNames: PlasmicCompanyInContextComponent__VariantProps
    });

    return PlasmicCompanyInContextComponent__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "accountInContext") {
    func.displayName = "PlasmicCompanyInContextComponent";
  } else {
    func.displayName = `PlasmicCompanyInContextComponent.${nodeName}`;
  }
  return func;
}

export const PlasmicCompanyInContextComponent = Object.assign(
  // Top-level PlasmicCompanyInContextComponent renders the root element
  makeNodeComponent("accountInContext"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    select: makeNodeComponent("select"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicCompanyInContextComponent
    internalVariantProps: PlasmicCompanyInContextComponent__VariantProps,
    internalArgProps: PlasmicCompanyInContextComponent__ArgProps
  }
);

export default PlasmicCompanyInContextComponent;
/* prettier-ignore-end */
