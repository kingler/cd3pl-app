// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: n7PMUCBoe1fA7rXcBRi5FH
// Component: HLNvZebaAJ
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_club_debut_3_pl_app.module.css"; // plasmic-import: n7PMUCBoe1fA7rXcBRi5FH/projectcss
import sty from "./PlasmicStatWidgetControls.module.css"; // plasmic-import: HLNvZebaAJ/css

import CloseIconsvgIcon from "./icons/PlasmicIcon__CloseIconsvg"; // plasmic-import: u9ToXHOYu/icon
import VectorsvgIcon from "./icons/PlasmicIcon__Vectorsvg"; // plasmic-import: JU3oeLTyS/icon

export type PlasmicStatWidgetControls__VariantMembers = {};

export type PlasmicStatWidgetControls__VariantsArgs = {};
type VariantPropType = keyof PlasmicStatWidgetControls__VariantsArgs;
export const PlasmicStatWidgetControls__VariantProps =
  new Array<VariantPropType>();

export type PlasmicStatWidgetControls__ArgsType = {};
type ArgPropType = keyof PlasmicStatWidgetControls__ArgsType;
export const PlasmicStatWidgetControls__ArgProps = new Array<ArgPropType>();

export type PlasmicStatWidgetControls__OverridesType = {
  controls?: p.Flex<"div">;
  closeButton?: p.Flex<"button">;
  svg?: p.Flex<"svg">;
  grabTarget?: p.Flex<"div">;
  grabIcon?: p.Flex<"svg">;
};

export interface DefaultStatWidgetControlsProps {
  className?: string;
}

function PlasmicStatWidgetControls__RenderFunc(props: {
  variants: PlasmicStatWidgetControls__VariantsArgs;
  args: PlasmicStatWidgetControls__ArgsType;
  overrides: PlasmicStatWidgetControls__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  return (
    true ? (
      <div
        data-plasmic-name={"controls"}
        data-plasmic-override={overrides.controls}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.controls
        )}
      >
        {true ? (
          <button
            data-plasmic-name={"closeButton"}
            data-plasmic-override={overrides.closeButton}
            className={classNames(
              projectcss.all,
              projectcss.button,
              sty.closeButton
            )}
          >
            <CloseIconsvgIcon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(projectcss.all, sty.svg)}
              role={"img"}
            />
          </button>
        ) : null}
        {true ? (
          <div
            data-plasmic-name={"grabTarget"}
            data-plasmic-override={overrides.grabTarget}
            className={classNames(projectcss.all, sty.grabTarget)}
          >
            <VectorsvgIcon
              data-plasmic-name={"grabIcon"}
              data-plasmic-override={overrides.grabIcon}
              className={classNames(projectcss.all, sty.grabIcon)}
              role={"img"}
            />
          </div>
        ) : null}
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  controls: ["controls", "closeButton", "svg", "grabTarget", "grabIcon"],
  closeButton: ["closeButton", "svg"],
  svg: ["svg"],
  grabTarget: ["grabTarget", "grabIcon"],
  grabIcon: ["grabIcon"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  controls: "div";
  closeButton: "button";
  svg: "svg";
  grabTarget: "div";
  grabIcon: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicStatWidgetControls__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicStatWidgetControls__VariantsArgs;
    args?: PlasmicStatWidgetControls__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicStatWidgetControls__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicStatWidgetControls__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicStatWidgetControls__ArgProps,
      internalVariantPropNames: PlasmicStatWidgetControls__VariantProps
    });

    return PlasmicStatWidgetControls__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "controls") {
    func.displayName = "PlasmicStatWidgetControls";
  } else {
    func.displayName = `PlasmicStatWidgetControls.${nodeName}`;
  }
  return func;
}

export const PlasmicStatWidgetControls = Object.assign(
  // Top-level PlasmicStatWidgetControls renders the root element
  makeNodeComponent("controls"),
  {
    // Helper components rendering sub-elements
    closeButton: makeNodeComponent("closeButton"),
    svg: makeNodeComponent("svg"),
    grabTarget: makeNodeComponent("grabTarget"),
    grabIcon: makeNodeComponent("grabIcon"),

    // Metadata about props expected for PlasmicStatWidgetControls
    internalVariantProps: PlasmicStatWidgetControls__VariantProps,
    internalArgProps: PlasmicStatWidgetControls__ArgProps
  }
);

export default PlasmicStatWidgetControls;
/* prettier-ignore-end */
