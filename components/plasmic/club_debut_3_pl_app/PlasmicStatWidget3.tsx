// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: n7PMUCBoe1fA7rXcBRi5FH
// Component: AIDP5SC9DqO
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import StatWidgetCardTop from "../../StatWidgetCardTop"; // plasmic-import: tLe-NrqXMX/component
import OrderCategoryTotal from "../../OrderCategoryTotal"; // plasmic-import: 6_pd8WbKah/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_club_debut_3_pl_app.module.css"; // plasmic-import: n7PMUCBoe1fA7rXcBRi5FH/projectcss
import sty from "./PlasmicStatWidget3.module.css"; // plasmic-import: AIDP5SC9DqO/css

import Intakesvg3Icon from "./icons/PlasmicIcon__Intakesvg3"; // plasmic-import: JATz_rnVL/icon
import FulfillmentIconsIcon from "./icons/PlasmicIcon__FulfillmentIcons"; // plasmic-import: xCxuE92vDyw/icon
import GroupIcon from "./icons/PlasmicIcon__Group"; // plasmic-import: SgAzxeatqRv/icon
import FulfillmentIcons2Icon from "./icons/PlasmicIcon__FulfillmentIcons2"; // plasmic-import: seUp9jdHXGK/icon

export type PlasmicStatWidget3__VariantMembers = {};

export type PlasmicStatWidget3__VariantsArgs = {};
type VariantPropType = keyof PlasmicStatWidget3__VariantsArgs;
export const PlasmicStatWidget3__VariantProps = new Array<VariantPropType>();

export type PlasmicStatWidget3__ArgsType = {
  newOrderIcon?: React.ReactNode;
  newOrderIcon2?: React.ReactNode;
  newOrderIcon3?: React.ReactNode;
  newOrderIcon4?: React.ReactNode;
  totalOrdersProcessing?: React.ReactNode;
};

type ArgPropType = keyof PlasmicStatWidget3__ArgsType;
export const PlasmicStatWidget3__ArgProps = new Array<ArgPropType>(
  "newOrderIcon",
  "newOrderIcon2",
  "newOrderIcon3",
  "newOrderIcon4",
  "totalOrdersProcessing"
);

export type PlasmicStatWidget3__OverridesType = {
  statWidget?: p.Flex<"div">;
  statWidgetCardTop?: p.Flex<typeof StatWidgetCardTop>;
  text?: p.Flex<"div">;
  box?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
};

export interface DefaultStatWidget3Props {
  newOrderIcon?: React.ReactNode;
  newOrderIcon2?: React.ReactNode;
  newOrderIcon3?: React.ReactNode;
  newOrderIcon4?: React.ReactNode;
  totalOrdersProcessing?: React.ReactNode;
  className?: string;
}

function PlasmicStatWidget3__RenderFunc(props: {
  variants: PlasmicStatWidget3__VariantsArgs;
  args: PlasmicStatWidget3__ArgsType;
  overrides: PlasmicStatWidget3__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  return (
    <div
      data-plasmic-name={"statWidget"}
      data-plasmic-override={overrides.statWidget}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.statWidget
      )}
    >
      <StatWidgetCardTop
        data-plasmic-name={"statWidgetCardTop"}
        data-plasmic-override={overrides.statWidgetCardTop}
        className={classNames("__wab_instance", sty.statWidgetCardTop)}
      >
        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text
          )}
        >
          {"Order Processing"}
        </div>
      </StatWidgetCardTop>

      <div
        data-plasmic-name={"box"}
        data-plasmic-override={overrides.box}
        className={classNames(projectcss.all, sty.box)}
      >
        {p.renderPlasmicSlot({
          defaultContents: "621",
          value: args.totalOrdersProcessing,
          className: classNames(sty.slotTargetTotalOrdersProcessing)
        })}
      </div>

      {true ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox)}
        >
          <OrderCategoryTotal
            className={classNames(
              "__wab_instance",
              sty.orderCategoryTotal__vgfM0
            )}
            newOrderIcon={p.renderPlasmicSlot({
              defaultContents: (
                <Intakesvg3Icon
                  className={classNames(projectcss.all, sty.svg__n7KFz)}
                  role={"img"}
                />
              ),

              value: args.newOrderIcon
            })}
            newOrderLabel={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___9Tk6D
                )}
              >
                {"New Orders"}
              </div>
            }
            totalNewOrders={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__asMbg
                )}
              >
                {"157"}
              </div>
            }
          />

          <OrderCategoryTotal
            className={classNames(
              "__wab_instance",
              sty.orderCategoryTotal__roFbU
            )}
            newOrderIcon={p.renderPlasmicSlot({
              defaultContents: (
                <FulfillmentIconsIcon
                  className={classNames(projectcss.all, sty.svg__m8Thm)}
                  role={"img"}
                />
              ),

              value: args.newOrderIcon2
            })}
            newOrderLabel={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__vuEjE
                )}
              >
                {"Picking & Packing"}
              </div>
            }
            totalNewOrders={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__z4CGj
                )}
              >
                {"239"}
              </div>
            }
          />

          <OrderCategoryTotal
            className={classNames(
              "__wab_instance",
              sty.orderCategoryTotal__vbuSr
            )}
            newOrderIcon={p.renderPlasmicSlot({
              defaultContents: (
                <GroupIcon
                  className={classNames(projectcss.all, sty.svg___6FE6R)}
                  role={"img"}
                />
              ),

              value: args.newOrderIcon3
            })}
            newOrderLabel={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__pyLbe
                )}
              >
                {"Labeling & Shipping"}
              </div>
            }
            totalNewOrders={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__trzHj
                )}
              >
                {"116"}
              </div>
            }
          />

          <OrderCategoryTotal
            className={classNames(
              "__wab_instance",
              sty.orderCategoryTotal__mc4NP
            )}
            newOrderIcon={p.renderPlasmicSlot({
              defaultContents: (
                <FulfillmentIcons2Icon
                  className={classNames(projectcss.all, sty.svg___5Wq6Q)}
                  role={"img"}
                />
              ),

              value: args.newOrderIcon4
            })}
            newOrderLabel={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___1Lbvk
                )}
              >
                {"Delivering"}
              </div>
            }
            totalNewOrders={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__lf7Y1
                )}
              >
                {"109"}
              </div>
            }
          />
        </p.Stack>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  statWidget: ["statWidget", "statWidgetCardTop", "text", "box", "freeBox"],
  statWidgetCardTop: ["statWidgetCardTop", "text"],
  text: ["text"],
  box: ["box"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  statWidget: "div";
  statWidgetCardTop: typeof StatWidgetCardTop;
  text: "div";
  box: "div";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicStatWidget3__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicStatWidget3__VariantsArgs;
    args?: PlasmicStatWidget3__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicStatWidget3__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicStatWidget3__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicStatWidget3__ArgProps,
      internalVariantPropNames: PlasmicStatWidget3__VariantProps
    });

    return PlasmicStatWidget3__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "statWidget") {
    func.displayName = "PlasmicStatWidget3";
  } else {
    func.displayName = `PlasmicStatWidget3.${nodeName}`;
  }
  return func;
}

export const PlasmicStatWidget3 = Object.assign(
  // Top-level PlasmicStatWidget3 renders the root element
  makeNodeComponent("statWidget"),
  {
    // Helper components rendering sub-elements
    statWidgetCardTop: makeNodeComponent("statWidgetCardTop"),
    text: makeNodeComponent("text"),
    box: makeNodeComponent("box"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicStatWidget3
    internalVariantProps: PlasmicStatWidget3__VariantProps,
    internalArgProps: PlasmicStatWidget3__ArgProps
  }
);

export default PlasmicStatWidget3;
/* prettier-ignore-end */
