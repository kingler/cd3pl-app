// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: n7PMUCBoe1fA7rXcBRi5FH
// Component: xqQ-vlrsqC
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import SidePanelComponent from "../../SidePanelComponent"; // plasmic-import: kMAT7d_nPjC/component
import TopBar from "../../TopBar"; // plasmic-import: CBtIl4cHm9/component
import Button from "../../Button"; // plasmic-import: iZavS5akl9G/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_club_debut_3_pl_app.module.css"; // plasmic-import: n7PMUCBoe1fA7rXcBRi5FH/projectcss
import sty from "./PlasmicDashboard.module.css"; // plasmic-import: xqQ-vlrsqC/css

import AppIcons6Icon from "./icons/PlasmicIcon__AppIcons6"; // plasmic-import: E6OUhK5mJ0/icon
import IconimportIconIcon from "./icons/PlasmicIcon__IconimportIcon"; // plasmic-import: kNFnVu4W7A/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: zGfmmTFBuGj/icon
import IcondownIconIcon from "./icons/PlasmicIcon__IcondownIcon"; // plasmic-import: 0-rTnaDj68/icon
import AppIcons5Icon from "./icons/PlasmicIcon__AppIcons5"; // plasmic-import: 7I9cVdZlI5O/icon

export type PlasmicDashboard__VariantMembers = {};

export type PlasmicDashboard__VariantsArgs = {};
type VariantPropType = keyof PlasmicDashboard__VariantsArgs;
export const PlasmicDashboard__VariantProps = new Array<VariantPropType>();

export type PlasmicDashboard__ArgsType = {};
type ArgPropType = keyof PlasmicDashboard__ArgsType;
export const PlasmicDashboard__ArgProps = new Array<ArgPropType>();

export type PlasmicDashboard__OverridesType = {
  dashboardPage?: p.Flex<"div">;
  mainContainer?: p.Flex<"div">;
  sidePanelComponent?: p.Flex<typeof SidePanelComponent>;
  freeBox?: p.Flex<"div">;
  topBar?: p.Flex<typeof TopBar>;
  dashboardIcon?: p.Flex<"svg">;
  importButton?: p.Flex<typeof Button>;
  exportButton?: p.Flex<typeof Button>;
  addOrderButton?: p.Flex<typeof Button>;
};

export interface DefaultDashboardProps {}

function PlasmicDashboard__RenderFunc(props: {
  variants: PlasmicDashboard__VariantsArgs;
  args: PlasmicDashboard__ArgsType;
  overrides: PlasmicDashboard__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{"Dashboard"}</title>
        <meta key="og:title" property="og:title" content={"Dashboard"} />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"dashboardPage"}
          data-plasmic-override={overrides.dashboardPage}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.dashboardPage
          )}
        >
          {true ? (
            <div
              data-plasmic-name={"mainContainer"}
              data-plasmic-override={overrides.mainContainer}
              className={classNames(projectcss.all, sty.mainContainer)}
            >
              <SidePanelComponent
                data-plasmic-name={"sidePanelComponent"}
                data-plasmic-override={overrides.sidePanelComponent}
                className={classNames("__wab_instance", sty.sidePanelComponent)}
              />

              <div
                data-plasmic-name={"freeBox"}
                data-plasmic-override={overrides.freeBox}
                className={classNames(projectcss.all, sty.freeBox)}
              >
                <TopBar
                  data-plasmic-name={"topBar"}
                  data-plasmic-override={overrides.topBar}
                  addOrderButton={
                    true ? (
                      <Button
                        data-plasmic-name={"addOrderButton"}
                        data-plasmic-override={overrides.addOrderButton}
                        className={classNames(
                          "__wab_instance",
                          sty.addOrderButton
                        )}
                        color={"teal" as const}
                        showStartIcon={true}
                        startIcon={
                          <AppIcons5Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg___3Xb0R
                            )}
                            role={"img"}
                          />
                        }
                      >
                        {"Add an order"}
                      </Button>
                    ) : null
                  }
                  className={classNames("__wab_instance", sty.topBar)}
                  exportButton={
                    true ? (
                      <Button
                        data-plasmic-name={"exportButton"}
                        data-plasmic-override={overrides.exportButton}
                        className={classNames(
                          "__wab_instance",
                          sty.exportButton
                        )}
                        color={"link" as const}
                        showStartIcon={true}
                        startIcon={
                          <IcondownIconIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__zFkF6
                            )}
                            role={"img"}
                          />
                        }
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___8Yj7D
                          )}
                        >
                          {"Export"}
                        </div>
                      </Button>
                    ) : null
                  }
                  importButton={
                    true ? (
                      <Button
                        data-plasmic-name={"importButton"}
                        data-plasmic-override={overrides.importButton}
                        className={classNames(
                          "__wab_instance",
                          sty.importButton
                        )}
                        color={"link" as const}
                        showStartIcon={true}
                        startIcon={
                          <IconimportIconIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__q6BV
                            )}
                            role={"img"}
                          />
                        }
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__cTm7N
                          )}
                        >
                          {"Import"}
                        </div>
                      </Button>
                    ) : null
                  }
                  ordersIcon={
                    <AppIcons6Icon
                      data-plasmic-name={"dashboardIcon"}
                      data-plasmic-override={overrides.dashboardIcon}
                      className={classNames(projectcss.all, sty.dashboardIcon)}
                      role={"img"}
                    />
                  }
                >
                  {"Dashboard"}
                </TopBar>
              </div>
            </div>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  dashboardPage: [
    "dashboardPage",
    "mainContainer",
    "sidePanelComponent",
    "freeBox",
    "topBar",
    "dashboardIcon",
    "importButton",
    "exportButton",
    "addOrderButton"
  ],
  mainContainer: [
    "mainContainer",
    "sidePanelComponent",
    "freeBox",
    "topBar",
    "dashboardIcon",
    "importButton",
    "exportButton",
    "addOrderButton"
  ],
  sidePanelComponent: ["sidePanelComponent"],
  freeBox: [
    "freeBox",
    "topBar",
    "dashboardIcon",
    "importButton",
    "exportButton",
    "addOrderButton"
  ],
  topBar: [
    "topBar",
    "dashboardIcon",
    "importButton",
    "exportButton",
    "addOrderButton"
  ],
  dashboardIcon: ["dashboardIcon"],
  importButton: ["importButton"],
  exportButton: ["exportButton"],
  addOrderButton: ["addOrderButton"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  dashboardPage: "div";
  mainContainer: "div";
  sidePanelComponent: typeof SidePanelComponent;
  freeBox: "div";
  topBar: typeof TopBar;
  dashboardIcon: "svg";
  importButton: typeof Button;
  exportButton: typeof Button;
  addOrderButton: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDashboard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDashboard__VariantsArgs;
    args?: PlasmicDashboard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDashboard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicDashboard__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicDashboard__ArgProps,
      internalVariantPropNames: PlasmicDashboard__VariantProps
    });

    return PlasmicDashboard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "dashboardPage") {
    func.displayName = "PlasmicDashboard";
  } else {
    func.displayName = `PlasmicDashboard.${nodeName}`;
  }
  return func;
}

export const PlasmicDashboard = Object.assign(
  // Top-level PlasmicDashboard renders the root element
  makeNodeComponent("dashboardPage"),
  {
    // Helper components rendering sub-elements
    mainContainer: makeNodeComponent("mainContainer"),
    sidePanelComponent: makeNodeComponent("sidePanelComponent"),
    freeBox: makeNodeComponent("freeBox"),
    topBar: makeNodeComponent("topBar"),
    dashboardIcon: makeNodeComponent("dashboardIcon"),
    importButton: makeNodeComponent("importButton"),
    exportButton: makeNodeComponent("exportButton"),
    addOrderButton: makeNodeComponent("addOrderButton"),

    // Metadata about props expected for PlasmicDashboard
    internalVariantProps: PlasmicDashboard__VariantProps,
    internalArgProps: PlasmicDashboard__ArgProps
  }
);

export default PlasmicDashboard;
/* prettier-ignore-end */
