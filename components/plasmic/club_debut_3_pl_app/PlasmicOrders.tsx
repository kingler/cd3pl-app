// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: n7PMUCBoe1fA7rXcBRi5FH
// Component: LQpMEikr_v
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import SidePanel from "../../SidePanel"; // plasmic-import: 6cCQxsGyn8Z/component
import TopBar from "../../TopBar"; // plasmic-import: CBtIl4cHm9/component
import Button from "../../Button"; // plasmic-import: iZavS5akl9G/component
import StatsCard from "../../StatsCard"; // plasmic-import: V8KmQ7KGSy/component
import StatsCard2 from "../../StatsCard2"; // plasmic-import: YFRpRP19Qn1/component

import { useScreenVariants as useScreenVariants_6JfnloVhzca } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 6JfnloVhzca/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_club_debut_3_pl_app.module.css"; // plasmic-import: n7PMUCBoe1fA7rXcBRi5FH/projectcss
import sty from "./PlasmicOrders.module.css"; // plasmic-import: LQpMEikr_v/css

import CompnavBarlinkiconordersDarkIcon from "./icons/PlasmicIcon__CompnavBarlinkiconordersDark"; // plasmic-import: SgMwanWxm1/icon
import IcondownIconIcon from "./icons/PlasmicIcon__IcondownIcon"; // plasmic-import: 0-rTnaDj68/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: zGfmmTFBuGj/icon
import IconimportIconIcon from "./icons/PlasmicIcon__IconimportIcon"; // plasmic-import: kNFnVu4W7A/icon
import AppIcons5Icon from "./icons/PlasmicIcon__AppIcons5"; // plasmic-import: 7I9cVdZlI5O/icon
import CheckmarkIcon from "./icons/PlasmicIcon__Checkmark"; // plasmic-import: IIHwJZbxXF/icon

export type PlasmicOrders__VariantMembers = {};

export type PlasmicOrders__VariantsArgs = {};
type VariantPropType = keyof PlasmicOrders__VariantsArgs;
export const PlasmicOrders__VariantProps = new Array<VariantPropType>();

export type PlasmicOrders__ArgsType = {};
type ArgPropType = keyof PlasmicOrders__ArgsType;
export const PlasmicOrders__ArgProps = new Array<ArgPropType>();

export type PlasmicOrders__OverridesType = {
  ordersListPage?: p.Flex<"div">;
  layout?: p.Flex<"div">;
  sidePanel?: p.Flex<typeof SidePanel>;
  mainContent?: p.Flex<"div">;
  topBar?: p.Flex<typeof TopBar>;
  exportButton?: p.Flex<typeof Button>;
  importButton?: p.Flex<typeof Button>;
  statsCard2?: p.Flex<typeof StatsCard2>;
  columnHeader?: p.Flex<"div">;
  cell37?: p.Flex<"div">;
  compCheckboxUnselected19?: p.Flex<"div">;
  checkbox37?: p.Flex<"div">;
  checkbox38?: p.Flex<"div">;
  cell38?: p.Flex<"div">;
  columnName1?: p.Flex<"div">;
  cell39?: p.Flex<"div">;
  columnName2?: p.Flex<"div">;
  cell40?: p.Flex<"div">;
  columnName3?: p.Flex<"div">;
  cell41?: p.Flex<"div">;
  columnName4?: p.Flex<"div">;
  cell42?: p.Flex<"div">;
  columnName5?: p.Flex<"div">;
  cell43?: p.Flex<"div">;
  columnName6?: p.Flex<"div">;
  cell44?: p.Flex<"div">;
  columnName7?: p.Flex<"div">;
  cell45?: p.Flex<"div">;
  columnName8?: p.Flex<"div">;
  cell?: p.Flex<"div">;
  orderId2?: p.Flex<"div">;
};

export interface DefaultOrdersProps {}

function PlasmicOrders__RenderFunc(props: {
  variants: PlasmicOrders__VariantsArgs;
  args: PlasmicOrders__ArgsType;
  overrides: PlasmicOrders__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6JfnloVhzca()
  });

  return (
    <React.Fragment>
      {}

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"ordersListPage"}
          data-plasmic-override={overrides.ordersListPage}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.ordersListPage
          )}
        >
          {true ? (
            <div
              data-plasmic-name={"layout"}
              data-plasmic-override={overrides.layout}
              className={classNames(projectcss.all, sty.layout)}
            >
              {(
                hasVariant(globalVariants, "screen", "mobile") ? true : true
              ) ? (
                <SidePanel
                  data-plasmic-name={"sidePanel"}
                  data-plasmic-override={overrides.sidePanel}
                  className={classNames("__wab_instance", sty.sidePanel)}
                />
              ) : null}

              <div
                data-plasmic-name={"mainContent"}
                data-plasmic-override={overrides.mainContent}
                className={classNames(projectcss.all, sty.mainContent)}
              >
                <TopBar
                  data-plasmic-name={"topBar"}
                  data-plasmic-override={overrides.topBar}
                  className={classNames("__wab_instance", sty.topBar)}
                  exportButton={
                    <Button
                      data-plasmic-name={"exportButton"}
                      data-plasmic-override={overrides.exportButton}
                      className={classNames("__wab_instance", sty.exportButton)}
                      color={"link" as const}
                      showStartIcon={true}
                      startIcon={
                        <IcondownIconIcon
                          className={classNames(projectcss.all, sty.svg__ua5Pe)}
                          role={"img"}
                        />
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tNdjs
                        )}
                      >
                        {"Export"}
                      </div>
                    </Button>
                  }
                  importButton={
                    <Button
                      data-plasmic-name={"importButton"}
                      data-plasmic-override={overrides.importButton}
                      className={classNames("__wab_instance", sty.importButton)}
                      color={"link" as const}
                      showStartIcon={true}
                      startIcon={
                        <IconimportIconIcon
                          className={classNames(projectcss.all, sty.svg__sq4ED)}
                          role={"img"}
                        />
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___4BsgS
                        )}
                      >
                        {"Import"}
                      </div>
                    </Button>
                  }
                >
                  {"Orders"}
                </TopBar>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___2Y2CX)}
                >
                  <StatsCard
                    className={classNames(
                      "__wab_instance",
                      sty.statsCard___9DuUh
                    )}
                  />

                  <StatsCard2
                    data-plasmic-name={"statsCard2"}
                    data-plasmic-override={overrides.statsCard2}
                    className={classNames("__wab_instance", sty.statsCard2)}
                  />

                  <StatsCard
                    className={classNames(
                      "__wab_instance",
                      sty.statsCard__zcjEc
                    )}
                    totalRevenu={"$1.8 mil"}
                  />

                  <StatsCard
                    className={classNames(
                      "__wab_instance",
                      sty.statsCard__gNgSo
                    )}
                    totalRevenu={"$1.8 mil"}
                  />
                </p.Stack>

                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__sbhY)}
                  >
                    {true ? (
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"columnHeader"}
                        data-plasmic-override={overrides.columnHeader}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.columnHeader)}
                      >
                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"cell37"}
                          data-plasmic-override={overrides.cell37}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.cell37)}
                        >
                          <div
                            data-plasmic-name={"compCheckboxUnselected19"}
                            data-plasmic-override={
                              overrides.compCheckboxUnselected19
                            }
                            className={classNames(
                              projectcss.all,
                              sty.compCheckboxUnselected19
                            )}
                          >
                            <div
                              data-plasmic-name={"checkbox37"}
                              data-plasmic-override={overrides.checkbox37}
                              className={classNames(
                                projectcss.all,
                                sty.checkbox37
                              )}
                            />

                            <div
                              data-plasmic-name={"checkbox38"}
                              data-plasmic-override={overrides.checkbox38}
                              className={classNames(
                                projectcss.all,
                                sty.checkbox38
                              )}
                            />

                            {false ? (
                              <CheckmarkIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__qLhrr
                                )}
                                role={"img"}
                              />
                            ) : null}
                          </div>
                        </p.Stack>

                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"cell38"}
                          data-plasmic-override={overrides.cell38}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.cell38)}
                        >
                          <div
                            data-plasmic-name={"columnName1"}
                            data-plasmic-override={overrides.columnName1}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.columnName1
                            )}
                          >
                            {"Order ID"}
                          </div>
                        </p.Stack>

                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"cell39"}
                          data-plasmic-override={overrides.cell39}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.cell39)}
                        >
                          <div
                            data-plasmic-name={"columnName2"}
                            data-plasmic-override={overrides.columnName2}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.columnName2
                            )}
                          >
                            {"Date"}
                          </div>
                        </p.Stack>

                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"cell40"}
                          data-plasmic-override={overrides.cell40}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.cell40)}
                        >
                          <div
                            data-plasmic-name={"columnName3"}
                            data-plasmic-override={overrides.columnName3}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.columnName3
                            )}
                          >
                            {"Customer"}
                          </div>
                        </p.Stack>

                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"cell41"}
                          data-plasmic-override={overrides.cell41}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.cell41)}
                        >
                          <div
                            data-plasmic-name={"columnName4"}
                            data-plasmic-override={overrides.columnName4}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.columnName4
                            )}
                          >
                            {"Items"}
                          </div>
                        </p.Stack>

                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"cell42"}
                          data-plasmic-override={overrides.cell42}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.cell42)}
                        >
                          <div
                            data-plasmic-name={"columnName5"}
                            data-plasmic-override={overrides.columnName5}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.columnName5
                            )}
                          >
                            {"Status"}
                          </div>
                        </p.Stack>

                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"cell43"}
                          data-plasmic-override={overrides.cell43}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.cell43)}
                        >
                          <div
                            data-plasmic-name={"columnName6"}
                            data-plasmic-override={overrides.columnName6}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.columnName6
                            )}
                          >
                            {"Payment"}
                          </div>
                        </p.Stack>

                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"cell44"}
                          data-plasmic-override={overrides.cell44}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.cell44)}
                        >
                          <div
                            data-plasmic-name={"columnName7"}
                            data-plasmic-override={overrides.columnName7}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.columnName7
                            )}
                          >
                            {"Tracking"}
                          </div>
                        </p.Stack>

                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"cell45"}
                          data-plasmic-override={overrides.cell45}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.cell45)}
                        >
                          <AppIcons5Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__ecRr0
                            )}
                            role={"img"}
                          />

                          <div
                            data-plasmic-name={"columnName8"}
                            data-plasmic-override={overrides.columnName8}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.columnName8
                            )}
                          >
                            {"Action"}
                          </div>
                        </p.Stack>
                      </p.Stack>
                    ) : null}

                    <div
                      className={classNames(projectcss.all, sty.freeBox___1NWP)}
                    >
                      <div
                        data-plasmic-name={"cell"}
                        data-plasmic-override={overrides.cell}
                        className={classNames(projectcss.all, sty.cell)}
                      >
                        <div
                          data-plasmic-name={"orderId2"}
                          data-plasmic-override={overrides.orderId2}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.orderId2
                          )}
                        >
                          {"Enter some text"}
                        </div>
                      </div>
                    </div>
                  </div>
                ) : null}
              </div>
            </div>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  ordersListPage: [
    "ordersListPage",
    "layout",
    "sidePanel",
    "mainContent",
    "topBar",
    "exportButton",
    "importButton",
    "statsCard2",
    "columnHeader",
    "cell37",
    "compCheckboxUnselected19",
    "checkbox37",
    "checkbox38",
    "cell38",
    "columnName1",
    "cell39",
    "columnName2",
    "cell40",
    "columnName3",
    "cell41",
    "columnName4",
    "cell42",
    "columnName5",
    "cell43",
    "columnName6",
    "cell44",
    "columnName7",
    "cell45",
    "columnName8",
    "cell",
    "orderId2"
  ],
  layout: [
    "layout",
    "sidePanel",
    "mainContent",
    "topBar",
    "exportButton",
    "importButton",
    "statsCard2",
    "columnHeader",
    "cell37",
    "compCheckboxUnselected19",
    "checkbox37",
    "checkbox38",
    "cell38",
    "columnName1",
    "cell39",
    "columnName2",
    "cell40",
    "columnName3",
    "cell41",
    "columnName4",
    "cell42",
    "columnName5",
    "cell43",
    "columnName6",
    "cell44",
    "columnName7",
    "cell45",
    "columnName8",
    "cell",
    "orderId2"
  ],
  sidePanel: ["sidePanel"],
  mainContent: [
    "mainContent",
    "topBar",
    "exportButton",
    "importButton",
    "statsCard2",
    "columnHeader",
    "cell37",
    "compCheckboxUnselected19",
    "checkbox37",
    "checkbox38",
    "cell38",
    "columnName1",
    "cell39",
    "columnName2",
    "cell40",
    "columnName3",
    "cell41",
    "columnName4",
    "cell42",
    "columnName5",
    "cell43",
    "columnName6",
    "cell44",
    "columnName7",
    "cell45",
    "columnName8",
    "cell",
    "orderId2"
  ],
  topBar: ["topBar", "exportButton", "importButton"],
  exportButton: ["exportButton"],
  importButton: ["importButton"],
  statsCard2: ["statsCard2"],
  columnHeader: [
    "columnHeader",
    "cell37",
    "compCheckboxUnselected19",
    "checkbox37",
    "checkbox38",
    "cell38",
    "columnName1",
    "cell39",
    "columnName2",
    "cell40",
    "columnName3",
    "cell41",
    "columnName4",
    "cell42",
    "columnName5",
    "cell43",
    "columnName6",
    "cell44",
    "columnName7",
    "cell45",
    "columnName8"
  ],
  cell37: ["cell37", "compCheckboxUnselected19", "checkbox37", "checkbox38"],
  compCheckboxUnselected19: [
    "compCheckboxUnselected19",
    "checkbox37",
    "checkbox38"
  ],
  checkbox37: ["checkbox37"],
  checkbox38: ["checkbox38"],
  cell38: ["cell38", "columnName1"],
  columnName1: ["columnName1"],
  cell39: ["cell39", "columnName2"],
  columnName2: ["columnName2"],
  cell40: ["cell40", "columnName3"],
  columnName3: ["columnName3"],
  cell41: ["cell41", "columnName4"],
  columnName4: ["columnName4"],
  cell42: ["cell42", "columnName5"],
  columnName5: ["columnName5"],
  cell43: ["cell43", "columnName6"],
  columnName6: ["columnName6"],
  cell44: ["cell44", "columnName7"],
  columnName7: ["columnName7"],
  cell45: ["cell45", "columnName8"],
  columnName8: ["columnName8"],
  cell: ["cell", "orderId2"],
  orderId2: ["orderId2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  ordersListPage: "div";
  layout: "div";
  sidePanel: typeof SidePanel;
  mainContent: "div";
  topBar: typeof TopBar;
  exportButton: typeof Button;
  importButton: typeof Button;
  statsCard2: typeof StatsCard2;
  columnHeader: "div";
  cell37: "div";
  compCheckboxUnselected19: "div";
  checkbox37: "div";
  checkbox38: "div";
  cell38: "div";
  columnName1: "div";
  cell39: "div";
  columnName2: "div";
  cell40: "div";
  columnName3: "div";
  cell41: "div";
  columnName4: "div";
  cell42: "div";
  columnName5: "div";
  cell43: "div";
  columnName6: "div";
  cell44: "div";
  columnName7: "div";
  cell45: "div";
  columnName8: "div";
  cell: "div";
  orderId2: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicOrders__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicOrders__VariantsArgs;
    args?: PlasmicOrders__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicOrders__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicOrders__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicOrders__ArgProps,
      internalVariantPropNames: PlasmicOrders__VariantProps
    });

    return PlasmicOrders__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "ordersListPage") {
    func.displayName = "PlasmicOrders";
  } else {
    func.displayName = `PlasmicOrders.${nodeName}`;
  }
  return func;
}

export const PlasmicOrders = Object.assign(
  // Top-level PlasmicOrders renders the root element
  makeNodeComponent("ordersListPage"),
  {
    // Helper components rendering sub-elements
    layout: makeNodeComponent("layout"),
    sidePanel: makeNodeComponent("sidePanel"),
    mainContent: makeNodeComponent("mainContent"),
    topBar: makeNodeComponent("topBar"),
    exportButton: makeNodeComponent("exportButton"),
    importButton: makeNodeComponent("importButton"),
    statsCard2: makeNodeComponent("statsCard2"),
    columnHeader: makeNodeComponent("columnHeader"),
    cell37: makeNodeComponent("cell37"),
    compCheckboxUnselected19: makeNodeComponent("compCheckboxUnselected19"),
    checkbox37: makeNodeComponent("checkbox37"),
    checkbox38: makeNodeComponent("checkbox38"),
    cell38: makeNodeComponent("cell38"),
    columnName1: makeNodeComponent("columnName1"),
    cell39: makeNodeComponent("cell39"),
    columnName2: makeNodeComponent("columnName2"),
    cell40: makeNodeComponent("cell40"),
    columnName3: makeNodeComponent("columnName3"),
    cell41: makeNodeComponent("cell41"),
    columnName4: makeNodeComponent("columnName4"),
    cell42: makeNodeComponent("cell42"),
    columnName5: makeNodeComponent("columnName5"),
    cell43: makeNodeComponent("cell43"),
    columnName6: makeNodeComponent("columnName6"),
    cell44: makeNodeComponent("cell44"),
    columnName7: makeNodeComponent("columnName7"),
    cell45: makeNodeComponent("cell45"),
    columnName8: makeNodeComponent("columnName8"),
    cell: makeNodeComponent("cell"),
    orderId2: makeNodeComponent("orderId2"),

    // Metadata about props expected for PlasmicOrders
    internalVariantProps: PlasmicOrders__VariantProps,
    internalArgProps: PlasmicOrders__ArgProps
  }
);

export default PlasmicOrders;
/* prettier-ignore-end */
